import base64
import calendar
import datetime
import json
import os
import random
import re
import requests
import subprocess
import sys
import threading
import time
import tkinter as tk
import tkinter.font as tkFont
import urllib.parse
import urllib.request as ur
import uuid
import warnings
import webbrowser
import winshell
from hashlib import md5
from io import BytesIO
from tkinter import filedialog
from tkinter import messagebox
from tkinter import ttk, Menu
from urllib.parse import urlparse, parse_qs

import cv2
import filetype
import websocket
from Crypto.Cipher import AES
from PIL import Image, ImageTk, ImageGrab
from bs4 import BeautifulSoup

sign_number = 0
warnings.filterwarnings("ignore")
is_download = 0
Version = "7.1"
iv = "q3e5t7u9o1p2a4s6"
password_key = "e1f2b8d38be84a2a9c4f0b0f4d4a4b3f"
username_key = "c6f1d6b3e0a7ed9c8b6a5d4c3b2f1e0d"
uid_key = "w$^i7DQ#CjXy6kLxv+mNz0K!e_3pUJW"
random_choice_strings = "1234567890qwertyuiopasdfghjklzxcvbnm"
check_window_close_list = [True, True, True]
check_qrcode_sign_window_list = {}
sign_num = 0
uuid_id = str(uuid.uuid4())
title_icon = ""
pic_data = ""
wechat_mini_program = ""
qrcode_sign_list = []
old_program_filename = "oldprogram.log"
error_log_filename = "ChaoXing_Sign_Error.log"
program_config_file = "config.json"
error_key = "Q89cufjE90DUJu[-9fu9PUJ90jf9JF9Jf90jD90J90j9P8UJ9j9h89HJ89"
browser_headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
}
app_headers = {
    "User-Agent": "Dalvik/2.1.0 (Linux; U; Android 12; Redmi K60 Pro+/JJF2.254689.001) (schild:387914895c1809e3be86ea5c7aecf0f5) (device:Redmi K60 Pro+) Language/zh_CN com.chaoxing.mobile/ChaoXingStudy_3_6.1.3_android_phone_258_100 (@Kalimdor)_56a7fffd69b3cb8869fde5987b373680"
}
bytesend = bytearray([0x1A, 0x16, 0x63, 0x6F, 0x6E, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x2E, 0x65, 0x61, 0x73, 0x65, 0x6D, 0x6F, 0x62, 0x2E, 0x63, 0x6F, 0x6D])
BytesAttachment = bytearray([0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6D, 0x65, 0x6E, 0x74, 0x10, 0x08, 0x32])
realpath = os.path.dirname(sys.argv[0])


def add_to_16(value):
    try:
        while len(value.encode("utf-8")) % 16 != 0:
            value += "\0"
        return str.encode(value)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def create_shortcut_to_desktop():
    try:
        target = sys.argv[0]
        fname = "学习通自动签到程序"
        winshell.CreateShortcut(Path=os.path.join(winshell.desktop(), fname + ".lnk"), Target=target)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def create_shortcut_to_startmenu():
    try:
        target = sys.argv[0]
        fname = "学习通自动签到程序"
        winshell.CreateShortcut(Path=os.path.join(winshell.start_menu(), fname + ".lnk"), Target=target)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def delete_shortcut_from_desktop():
    try:
        fname = "学习通自动签到程序"
        hdd = winshell.desktop()[:2]
        subprocess.call(hdd + "&cd \"" + winshell.desktop() + "\"&DEL /F /A /Q " + fname + ".lnk", shell=True)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def delete_shortcut_from_startmenu():
    try:
        fname = "学习通自动签到程序"
        hdd = winshell.start_menu()[:2]
        subprocess.call(hdd + "&cd \"" + winshell.start_menu() + "\"&DEL /F /A /Q " + fname + ".lnk", shell=True)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def thread_it(func, *args):
    """将函数打包进线程"""
    # 创建
    thread = threading.Thread(target=func, args=args)
    # 守护 !!!
    thread.daemon = True
    # 启动
    thread.start()
    # 阻塞--卡死界面！
    # t.join()


def Error_handling(line, error):
    error_time = str(int(time.time()))
    error_message = Version + ":" + str(line[2].tb_lineno) + ":" + str(error)
    try:
        error_data = {
            "key": error_key,
            "token": md5((error_key + "_" + error_time + "_refj38fcnhruwh48fech_" + error_message).encode("utf-8")).hexdigest(),
            "time": error_time,
            "message": error_message
        }
        requests.post("https://api.waadri.top/ChaoXing/api/get_error_message.php", data=error_data, headers=browser_headers)
        with open(realpath + "\\" + error_log_filename, "a", encoding="utf-8") as error_file:
            error_file.write(str(datetime.datetime.fromtimestamp(int(error_time))) + "|" + error_message+"\n")
        messagebox.showerror("错误", "程序运行出错了，错误信息已上报云端，请等待下个版本修复，若您使用的程序版本不是最新版本则可以尝试更新到最新版本尝试解决，您也可以加入QQ群914995724反馈更多的错误信息，感谢您的支持。", parent=root)
    except:
        with open(realpath + "\\" + error_log_filename, "a", encoding="utf-8") as error_file:
            error_file.write(str(datetime.datetime.fromtimestamp(int(error_time))) + "|" + error_message+"\n")
        messagebox.showerror("错误", "程序运行出错了，错误信息已保存至程序目录下的" + error_log_filename + "文件，请添加QQ群914995724反馈报错信息，若您使用的程序版本不是最新版本则可以尝试更新到最新版本尝试解决，感谢您的支持。", parent=root)
    os._exit(1)


def Ready_to_update(window, component, button=None):
    try:
        for c in component:
            c.configure(state="disabled")
        thread_it(Check_for_updates, window, component, button)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def Check_for_updates(window, component, button):
    global is_download
    try:
        url = "https://www.waadri.top/ChaoXing/api/logsapi.php"
        try:
            res = requests.get(url, headers=browser_headers)
            res = json.loads(res.text)
        except:
            messagebox.showwarning("警告", "网络连接异常，程序检查更新失败，请检查您的网络后重试！", parent=window)
            for c in component:
                c.configure(state="normal")
            return
        version = res["newversion"]
        if version != Version:
            for k in res["data"][0]:
                answer = messagebox.askyesno("提示", "程序检测到新版本，是否立即更新？\n新版本更新内容：\n" + res["data"][0][k].replace("|", "\n"), parent=window)
                if answer:
                    is_download = 1
                    if button is not None:
                        button.configure(text="更新中……")
                    thread_it(Download_the_update, button, window, version, component)
                elif component:
                    for c in component:
                        c.configure(state="normal")
        else:
            if component:
                messagebox.showinfo("提示", "恭喜您，您已经使用了最新版本的学习通自动签到程序！", parent=window)
                for c in component:
                    c.configure(state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def Download_the_update(button, window, version, component):
    global is_download, download_label, progress, download_start_time, download_window
    try:
        download_window = tk.Toplevel(root)
        width = 300
        height = 100
        screen_width = download_window.winfo_screenwidth()
        screen_height = download_window.winfo_screenheight()
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        download_window.geometry("{}x{}+{}+{}".format(width, height, x, y))
        download_window.title("程序更新")
        download_window.resizable(False, False)
        download_window.overrideredirect(True)
        download_window.attributes("-topmost", True)
        download_label = ttk.Label(download_window, text="\n更新下载中……\n")
        download_label.pack()
        progress = ttk.Progressbar(download_window, orient="horizontal", length=200, mode="determinate")
        progress["value"] = 0
        progress.pack()
        download_start_time = time.time()
        url = "https://api.waadri.top/ChaoXing/download/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F.exe"
        local = os.path.join(realpath+"/", "Auto_Sign_" + version + ".exe")
        try:
            ur.urlretrieve(url, local, Schedule)
        except:
            messagebox.showwarning("警告", "网络连接异常，更新下载失败，请检查您的网络后重试！", parent=download_window)
            download_window.destroy()
            is_download = 0
            if component:
                for c in component:
                    c.configure(state="normal")
                button.configure(text="检查更新")
            return
        with open(realpath + "/oldprogram", "w") as OLD:
            OLD.write(os.path.basename(sys.argv[0]))
        thread_it(delete_shortcut_from_desktop)
        thread_it(delete_shortcut_from_startmenu)
        messagebox.showinfo("提示", "程序需要重新启动来完成更新，请您保存好您的签到信息后点击确定进行更新！", parent=download_window)
        download_window.destroy()
        try:
            os.startfile(realpath + "/Auto_Sign_" + version + ".exe", "runas")
        except:
            messagebox.showwarning("警告", "新版本程序启动失败，请手动运行程序目录下的Auto_Sign_" + version + ".exe新版本程序！", parent=window)
        os._exit(0)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def Schedule(blocknum, blocksize, totalsize):
    download_progress = blocknum * blocksize * 100 / totalsize
    cur_time = time.time()
    elapsed_time = cur_time - download_start_time
    if elapsed_time > 0 and download_progress < 101:
        speed = blocknum * blocksize / elapsed_time / 1024
        download_label.configure(text="\n已下载"+str(int(download_progress))+"%%，平均下载速度 %.2f KB/s\n" % speed)
        progress["value"] = download_progress
    download_window.update_idletasks()


def check_configuration_file(num, component):
    global is_scan, return_flag, program_config
    try:
        if num:
            return_flag = 1
            is_scan = 4
        for c in component:
            c.destroy()
        have_old_file = 0
        old_activeid = old_zybinformation = old_conf = old_advance = None
        if os.path.isfile(realpath + "\\" + "activeid.txt") and os.path.isfile(realpath + "\\" + "zybinformation.txt") and os.path.isfile(realpath + "\\" + "conf.txt") and os.path.isfile(realpath + "\\" + "advance.txt"):
            have_old_file = 1
            with open(realpath + "\\" + "activeid.txt") as file:
                old_activeid = file.read().split("\n")
            with open(realpath + "\\" + "zybinformation.txt") as file:
                old_zybinformation = file.read()
            with open(realpath + "\\" + "conf.txt") as file:
                old_conf = file.read()
            with open(realpath + "\\" + "advance.txt") as file:
                old_advance = file.read()
        if have_old_file == 1:
            program_config = []
            old_to_new_window(have_old_file, old_activeid, old_zybinformation, old_conf, old_advance)
        elif not os.path.isfile(realpath + "\\" + program_config_file):
            program_config = []
            login_window(0, [])
        else:
            try:
                with open(realpath + "\\" + program_config_file) as file:
                    program_config = json.loads(decrypt(file.read().split("\n")[1], "ChaoXing_xxt_sign_config"))
                if len(program_config) != 0:
                    login_program_window([])
                else:
                    login_window(0, [])
            except:
                program_config = []
                messagebox.showwarning("加载失败", "配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
                login_window(0, [])
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def login_window(num, component):
    global return_flag
    try:
        return_flag = 0
        for c in component:
            c.destroy()
        qrcode_area = ttk.Labelframe(root, text="使用学习通APP扫描二维码登录")
        qrcode_area.place(relx=0.01, rely=0, relwidth=0.3, relheight=0.98)
        password_login_area = ttk.Frame(root)
        password_login_area.place(relx=0.31, relwidth=0.69, relheight=1)
        thread_it(get_qrcode, qrcode_area, [qrcode_area, password_login_area])
        word_tips = ttk.Label(password_login_area, text="学习通手机号登录", font=tkFont.Font(size=20, family="黑体"))
        word_tips.pack()
        change_login_type_button = ttk.Button(password_login_area, text="切换登录方式 >", command=lambda: change_login_type(0, [word_tips, username_label, input_label, change_login_type_button, determine, qrcode_area, password_login_area, tips_label, username_input, password_input, Re_login]))
        change_login_type_button.place(relx=0.8)
        input_label = ttk.Label(password_login_area)
        input_label.place(rely=0.1, relwidth=1, relheight=0.9)
        username_label = ttk.Label(input_label, text="手机号/超星号")
        username_label.place(relx=0.2, rely=0.08)
        username_input = ttk.Entry(input_label)
        username_input.place(relx=0.2, rely=0.15, relwidth=0.6)
        password_label = ttk.Label(input_label, text="学习通密码")
        password_label.place(relx=0.2, rely=0.28)
        password_input = ttk.Entry(input_label, show="*")
        password_input.place(relx=0.2, rely=0.35, relwidth=0.6)
        tips_label = ttk.Label(input_label)
        tips_label.place(relx=0.2, rely=0.45)
        if num:
            determine = ttk.Button(input_label, text="登录", command=lambda: thread_it(check_unit_code, 0, username_input.get(), password_input.get(), "", tips_label, [determine, Re_login, username_input, password_input, change_login_type_button], [qrcode_area, password_login_area]))
            Re_login = ttk.Button(input_label, text="返回", command=lambda: check_configuration_file(1, [qrcode_area, password_login_area]))
            username_input.bind("<Return>", lambda event: thread_it(check_unit_code, 0, username_input.get(), password_input.get(), "", tips_label, [determine, Re_login, username_input, password_input, change_login_type_button], [qrcode_area, password_login_area]))
            password_input.bind("<Return>", lambda event: thread_it(check_unit_code, 0, username_input.get(), password_input.get(), "", tips_label, [determine, Re_login, username_input, password_input, change_login_type_button], [qrcode_area, password_login_area]))
        else:
            determine = ttk.Button(input_label, text="登录", command=lambda: thread_it(check_unit_code, 0, username_input.get(), password_input.get(), "", tips_label, [determine, username_input, password_input, change_login_type_button], [qrcode_area, password_login_area]))
            Re_login = ttk.Button(input_label, text="返回", command=lambda: return_program_login([qrcode_area, password_login_area]), state="disabled")
            username_input.bind("<Return>", lambda event: thread_it(check_unit_code, 0, username_input.get(), password_input.get(), "", tips_label, [determine, username_input, password_input, change_login_type_button], [qrcode_area, password_login_area]))
            password_input.bind("<Return>", lambda event: thread_it(check_unit_code, 0, username_input.get(), password_input.get(), "", tips_label, [determine, username_input, password_input, change_login_type_button], [qrcode_area, password_login_area]))
        determine.place(relx=0.25, rely=0.75, relwidth=0.15, relheight=0.15)
        Re_login.place(relx=0.6, rely=0.75, relwidth=0.15, relheight=0.15)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_unit_code(num, cx_username, cx_password, unit, label, component1, component2):
    global program_user, is_scan
    try:
        if num == 0:
            if cx_username == "" or cx_password == "":
                label.configure(text="手机号/超星号或学习通密码不能为空", style="Red.TLabel")
                return
            label.configure(text="登录中……", style="Blue.TLabel")
            for c in component1:
                c.configure(state="disabled")
            result = cx_login_check(username=cx_username, password=cx_password, schoolid=unit)
            if not result[0] and result[1] == 0:
                for c in component1:
                    c.configure(state="normal")
                label.configure(text="登录失败，网络连接异常", style="Red.TLabel")
                return
            elif not result[0] and result[1] == 2:
                for c in component1:
                    c.configure(state="normal")
                label.configure(text="登录失败，手机号/超星号或学习通密码错误", style="Red.TLabel")
                return
            else:
                label.configure(text="登录成功", style="Green.TLabel")
                time.sleep(1)
                for d in range(len(program_config)):
                    user_config = json.loads(decrypt(program_config[d]["user_config"], decrypt(program_config[d]["password"], password_key)))
                    if result[1] == user_config["cx_login_config"]["uid"]:
                        if messagebox.askyesno("提示", "检测到当前学习通账号已与用户" + decrypt(program_config[d]["username"], username_key) + "绑定，是否直接以该用户的身份登录程序？", parent=root):
                            program_user = decrypt(program_config[d]["username"], username_key)
                            user_config["cx_login_config"]["cxname"] = result[2]
                            user_config["cx_login_config"]["cxusername"] = cx_username
                            user_config["cx_login_config"]["cxpassword"] = cx_password
                            user_config["cx_login_config"]["cxschoolid"] = unit
                            user_config["cx_login_config"]["cxcookies"] = json.dumps(result[3].cookies.get_dict())
                            last_login_time = user_config["last_login_time"]
                            user_config["last_login_time"] = int(time.time())
                            config = user_config
                            program_config[d]["user_config"] = encrypt(json.dumps(user_config), decrypt(program_config[d]["password"], password_key))
                            with open(realpath + "\\" + program_config_file, "w") as file:
                                file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                            if last_login_time == 0:
                                last_login_time = "未知"
                            else:
                                last_login_time = datetime.datetime.fromtimestamp(last_login_time)
                            messagebox.showinfo("欢迎回来", "亲爱的" + str(result[2]) + "同学，欢迎使用学习通自动签到程序\n您上次登录时间：" + str(last_login_time), parent=root)
                            is_scan = 5
                            main_window(result[3], str(result[2]), result[1], component2, config)
                            return
                        else:
                            break
                label.configure(text="")
                covering_layer = ttk.Frame(root)
                covering_layer.place(relwidth=1, relheight=1)
                component2.append(covering_layer)
                word_tips = ttk.Label(covering_layer, text="设置您的程序访问用户名密码", font=tkFont.Font(size=20, family="黑体"))
                word_tips.pack()
                username_label = ttk.Label(covering_layer, text="程序访问用户名")
                username_label.place(relx=0.3, rely=0.28)
                username_input = ttk.Entry(covering_layer)
                username_input.place(relx=0.3, rely=0.35, relwidth=0.4)
                password_label = ttk.Label(covering_layer, text="程序访问密码")
                password_label.place(relx=0.3, rely=0.48)
                password_input = ttk.Entry(covering_layer, show="*")
                password_input.place(relx=0.3, rely=0.55, relwidth=0.4)
                var = tk.BooleanVar(value=False)
                is_remember_password_checkbutton = ttk.Checkbutton(covering_layer, text="记住密码", variable=var)
                is_remember_password_checkbutton.place(relx=0.71, rely=0.55)
                tips_label = ttk.Label(covering_layer)
                tips_label.place(relx=0.3, rely=0.65)
                determine = ttk.Button(covering_layer, text="保存", command=lambda: search_and_save_config(uid=result[1], cxname=result[2], session=result[3], username=username_input.get(), password=password_input.get(), cxusername=cx_username, cxpassword=cx_password, cxschoolid=unit, component=component2, remeber_password=var.get(), label=tips_label))
                determine.place(relx=0.25, rely=0.75, relwidth=0.15, relheight=0.15)
                Re_login = ttk.Button(covering_layer, text="返回", command=lambda: covering_layer.destroy())
                Re_login.place(relx=0.6, rely=0.75, relwidth=0.15, relheight=0.15)
                username_input.bind("<Return>", lambda event: search_and_save_config(uid=result[1], cxname=result[2], session=result[3], username=username_input.get(), password=password_input.get(), cxusername=cx_username, cxpassword=cx_password, cxschoolid=unit, component=component2, remeber_password=var.get(), label=tips_label))
                password_input.bind("<Return>", lambda event: search_and_save_config(uid=result[1], cxname=result[2], session=result[3], username=username_input.get(), password=password_input.get(), cxusername=cx_username, cxpassword=cx_password, cxschoolid=unit, component=component2, remeber_password=var.get(), label=tips_label))
                for c in component1:
                    c.configure(state="normal")
        else:
            if cx_username == "" or cx_password == "" or unit == "":
                label.configure(text="学号/工号、学习通密码或单位UC码/单位名称不能为空", style="Red.TLabel")
                return
            label.configure(text="登录中……", style="Blue.TLabel")
            for c in component1:
                c.configure(state="disabled")
            if unit.isdigit():
                try:
                    res = requests.get("https://passport2.chaoxing.com/org/getName?schoolid="+unit, headers=browser_headers, timeout=10)
                    res = json.loads(res.text)
                except:
                    for c in component1:
                        c.configure(state="normal")
                    label.configure(text="登录失败，网络连接异常", style="Red.TLabel")
                    return
                if res["status"] == "failed":
                    for c in component1:
                        c.configure(state="normal")
                    label.configure(text="此单位不存在，请核对您的单位UC码后重试", style="Red.TLabel")
                    return
            else:
                try:
                    res = requests.get("https://passport2.chaoxing.com/org/searchUnis?product=44&filter=" + unit, headers=browser_headers, timeout=10)
                    res = json.loads(res.text)
                except:
                    for c in component1:
                        c.configure(state="normal")
                    label.configure(text="登录失败，网络连接异常", style="Red.TLabel")
                    return
                if not res["result"]:
                    for c in component1:
                        c.configure(state="normal")
                    label.configure(text="此单位不存在，请核对您的单位名称后重试", style="Red.TLabel")
                    return
                else:
                    is_find = 0
                    for d in res["froms"]:
                        if d["name"] == unit:
                            is_find = 1
                            unit = str(d["schoolid"])
                            break
                    if is_find == 0:
                        for c in component1:
                            c.configure(state="normal")
                        label.configure(text="此单位不存在，请核对您的单位名称后重试", style="Red.TLabel")
                        return
            result = cx_login_check(username=cx_username, password=cx_password, schoolid=unit)
            if not result[0] and result[1] == 0:
                for c in component1:
                    c.configure(state="normal")
                label.configure(text="登录失败，网络连接异常", style="Red.TLabel")
                return
            elif not result[0] and result[1] == 2:
                for c in component1:
                    c.configure(state="normal")
                label.configure(text="登录失败，学号/工号、学习通密码或单位UC码/单位名称错误", style="Red.TLabel")
                return
            else:
                label.configure(text="登录成功", style="Green.TLabel")
                time.sleep(1)
                for d in range(len(program_config)):
                    user_config = json.loads(decrypt(program_config[d]["user_config"], decrypt(program_config[d]["password"], password_key)))
                    if result[1] == user_config["cx_login_config"]["uid"]:
                        if messagebox.askyesno("提示", "检测到当前学习通账号已与用户" + decrypt(program_config[d]["username"], username_key) + "绑定，是否直接以该用户的身份登录程序？", parent=root):
                            program_user = decrypt(program_config[d]["username"], username_key)
                            user_config["cx_login_config"]["cxname"] = result[2]
                            user_config["cx_login_config"]["cxusername"] = cx_username
                            user_config["cx_login_config"]["cxpassword"] = cx_password
                            user_config["cx_login_config"]["cxschoolid"] = unit
                            user_config["cx_login_config"]["cxcookies"] = json.dumps(result[3].cookies.get_dict())
                            last_login_time = user_config["last_login_time"]
                            user_config["last_login_time"] = int(time.time())
                            config = user_config
                            program_config[d]["user_config"] = encrypt(json.dumps(user_config), decrypt(program_config[d]["password"], password_key))
                            with open(realpath + "\\" + program_config_file, "w") as file:
                                file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                            if last_login_time == 0:
                                last_login_time = "未知"
                            else:
                                last_login_time = datetime.datetime.fromtimestamp(last_login_time)
                            messagebox.showinfo("欢迎回来", "亲爱的" + str(result[2]) + "同学，欢迎使用学习通自动签到程序\n您上次登录时间：" + str(last_login_time), parent=root)
                            is_scan = 5
                            main_window(result[3], str(result[2]), result[1], component2, config)
                            return
                        else:
                            break
                label.configure(text="")
                covering_layer = ttk.Frame(root)
                covering_layer.place(relwidth=1, relheight=1)
                component2.append(covering_layer)
                word_tips = ttk.Label(covering_layer, text="设置您的程序访问用户名密码", font=tkFont.Font(size=20, family="黑体"))
                word_tips.pack()
                username_label = ttk.Label(covering_layer, text="程序访问用户名")
                username_label.place(relx=0.3, rely=0.28)
                username_input = ttk.Entry(covering_layer)
                username_input.place(relx=0.3, rely=0.35, relwidth=0.4)
                password_label = ttk.Label(covering_layer, text="程序访问密码")
                password_label.place(relx=0.3, rely=0.48)
                password_input = ttk.Entry(covering_layer, show="*")
                password_input.place(relx=0.3, rely=0.55, relwidth=0.4)
                var = tk.BooleanVar(value=False)
                is_remember_password_checkbutton = ttk.Checkbutton(covering_layer, text="记住密码", variable=var)
                is_remember_password_checkbutton.place(relx=0.71, rely=0.55)
                tips_label = ttk.Label(covering_layer)
                tips_label.place(relx=0.3, rely=0.65)
                determine = ttk.Button(covering_layer, text="保存", command=lambda: search_and_save_config(uid=result[1], cxname=result[2], session=result[3], username=username_input.get(), password=password_input.get(), cxusername=cx_username, cxpassword=cx_password, cxschoolid=unit, component=component2, remeber_password=var.get(), label=tips_label))
                determine.place(relx=0.25, rely=0.75, relwidth=0.15, relheight=0.15)
                Re_login = ttk.Button(covering_layer, text="返回", command=lambda: covering_layer.destroy())
                Re_login.place(relx=0.6, rely=0.75, relwidth=0.15, relheight=0.15)
                username_input.bind("<Return>", lambda event: search_and_save_config(uid=result[1], cxname=result[2], session=result[3], username=username_input.get(), password=password_input.get(), cxusername=cx_username, cxpassword=cx_password, cxschoolid=unit, component=component2, remeber_password=var.get(), label=tips_label))
                password_input.bind("<Return>", lambda event: search_and_save_config(uid=result[1], cxname=result[2], session=result[3], username=username_input.get(), password=password_input.get(), cxusername=cx_username, cxpassword=cx_password, cxschoolid=unit, component=component2, remeber_password=var.get(), label=tips_label))
                for c in component1:
                    c.configure(state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_login_type(num, component):
    try:
        if num == 0:
            component[8].delete(0, tk.END)
            component[9].delete(0, tk.END)
            component[0].configure(text="学习通机构账号登录")
            component[1].configure(text="学号/工号")
            unit_label = ttk.Label(component[2], text="单位UC码/单位名称")
            unit_label.place(relx=0.2, rely=0.48)
            unit_input = ttk.Entry(component[2])
            unit_input.place(relx=0.2, rely=0.55, relwidth=0.6)
            component.append(unit_label)
            component.append(unit_input)
            component[3].configure(command=lambda: change_login_type(1, component))
            component[4].configure(command=lambda: thread_it(check_unit_code, 1, component[8].get(), component[9].get(), unit_input.get(), component[7], [component[4], component[10], component[8], component[9], component[3], unit_input], [component[5], component[6]]))
            component[7].configure(text="")
            component[7].place(relx=0.2, rely=0.65)
            component[8].unbind("<Return>")
            component[9].unbind("<Return>")
            component[8].bind("<Return>", lambda event: thread_it(check_unit_code, 1, component[8].get(), component[9].get(), unit_input.get(), component[7], [component[4], component[10], component[8], component[9], component[3], unit_input], [component[5], component[6]]))
            component[9].bind("<Return>", lambda event: thread_it(check_unit_code, 1, component[8].get(), component[9].get(), unit_input.get(), component[7], [component[4], component[10], component[8], component[9], component[3], unit_input], [component[5], component[6]]))
            unit_input.bind("<Return>", lambda event: thread_it(check_unit_code, 1, component[8].get(), component[9].get(), unit_input.get(), component[7], [component[4], component[10], component[8], component[9], component[3], unit_input], [component[5], component[6]]))
        else:
            component[8].delete(0, tk.END)
            component[9].delete(0, tk.END)
            component[0].configure(text="学习通手机号登录")
            component[1].configure(text="手机号/超星号")
            component[11].destroy()
            component[12].destroy()
            component[3].configure(command=lambda: change_login_type(0, component[:11]))
            component[4].configure(command=lambda: thread_it(check_unit_code, 0, component[8].get(), component[9].get(), "", component[7], [component[4], component[10], component[8], component[9], component[3]], [component[5], component[6]]))
            component[7].configure(text="")
            component[7].place(relx=0.2, rely=0.45)
            component[8].unbind("<Return>")
            component[9].unbind("<Return>")
            component[8].bind("<Return>", lambda event: thread_it(check_unit_code, 0, component[8].get(), component[9].get(), "", component[7], [component[4], component[10], component[8], component[9], component[3]], [component[5], component[6]]))
            component[9].bind("<Return>", lambda event: thread_it(check_unit_code, 0, component[8].get(), component[9].get(), "", component[7], [component[4], component[10], component[8], component[9], component[3]], [component[5], component[6]]))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def return_program_login(component):
    global return_flag, is_scan
    try:
        return_flag = 1
        is_scan = 4
        login_program_window(component)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_qrcode(_root, component):
    try:
        qrcode = ttk.Label(_root, font=tkFont.Font(size=10), justify="center", wraplength=230)
        qrcode.place(relx=0.13, rely=0)
        qrcode.configure(text="\n\n\n\n\n\n\n\n         二维码加载中……")
        button = ttk.Button(_root, text="重新加载", state="disabled", command=lambda:  thread_it(reload_qrcode, qrcode, button, component))
        button.place(relx=0.095, rely=0.85, relwidth=0.79, relheight=0.15)
        try:
            session = requests.session()
            res = session.get("https://passport2.chaoxing.com/cloudscanlogin", headers=browser_headers, timeout=10)
            _uuid = re.search("<input type = \"hidden\" value=\"(.*?)\" id = \"uuid\"/>", res.text).groups()[0]
            enc = re.search("<input type = \"hidden\" value=\"(.*?)\" id = \"enc\"/>", res.text).groups()[0]
            qrcode_url = "https://passport2.chaoxing.com"+re.search("<img src=\"(.*?)\" alt=\"\" id=\"ewm\"/>", res.text).groups()[0]
            res = session.get(qrcode_url, headers=browser_headers, timeout=10)
            qrcode_image = Image.open(BytesIO(res.content))
            qrcode_image = ImageTk.PhotoImage(qrcode_image.resize((210, 210)))
            qrcode.configure(text="", image=qrcode_image)
            qrcode.image = qrcode_image
            thread_it(check_qrcode_login_status, session, _uuid, enc, qrcode, button, component)
        except Exception as e:
            print(datetime.datetime.strftime(datetime.datetime.now(), '[%Y-%m-%d %H:%M:%S]') + str(e.__traceback__.tb_lineno) + str(e))
            qrcode.configure(text="\n\n\n\n\n\n\n\n     二维码加载失败，请重试")
            button.configure(state="normal", command=lambda:  thread_it(reload_qrcode, qrcode, button, component))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def reload_qrcode(qrcode, button, component):
    try:
        qrcode.configure(text="\n\n\n\n\n\n\n\n         二维码加载中……")
        button.configure(text="重新加载", state="disabled")
        try:
            session = requests.session()
            res = session.get("https://passport2.chaoxing.com/cloudscanlogin", headers=browser_headers, timeout=10)
            _uuid = re.search("<input type = \"hidden\" value=\"(.*?)\" id = \"uuid\"/>", res.text).groups()[0]
            enc = re.search("<input type = \"hidden\" value=\"(.*?)\" id = \"enc\"/>", res.text).groups()[0]
            qrcode_url = "https://passport2.chaoxing.com"+re.search("<img src=\"(.*?)\" alt=\"\" id=\"ewm\"/>", res.text).groups()[0]
            res = session.get(qrcode_url, headers=browser_headers, timeout=10)
            qrcode_image = Image.open(BytesIO(res.content))
            qrcode_image = ImageTk.PhotoImage(qrcode_image.resize((210, 210)))
            qrcode.configure(text="", image=qrcode_image)
            qrcode.image = qrcode_image
            thread_it(check_qrcode_login_status, session, _uuid, enc, qrcode, button, component)
        except Exception as e:
            print(datetime.datetime.strftime(datetime.datetime.now(), '[%Y-%m-%d %H:%M:%S]') + str(e.__traceback__.tb_lineno) + str(e))
            qrcode.configure(text="\n\n\n\n\n\n\n\n     二维码加载失败，请重试")
            button.configure(state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_qrcode_login_status(session, _uuid, enc, qrcode, button, component):
    global is_scan, last_scan_time, return_flag, program_user
    try:
        is_scan = 0
        thread_it(change_button_300, button)
        for i in range(300):
            if is_scan == 5:
                return
            if is_scan == 4:
                break
            try:
                res = session.post("https://passport2.chaoxing.com/getauthstatus", headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36", "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"}, data="enc=" + enc + "&uuid=" + _uuid, timeout=10)
                res = json.loads(res.text)
            except:
                is_scan = 3
                qrcode.configure(text="\n\n\n\n\n\n\n\n获取登录状态失败，请重新加载二维码", image="")
                button.configure(text="重新加载", state="normal")
                break
            if res["status"]:
                is_scan = 2
                try:
                    r = session.get("https://sso.chaoxing.com/apis/login/userLogin4Uname.do", headers=browser_headers, timeout=10)
                    r = json.loads(r.text)
                except:
                    messagebox.showwarning("登录失败", "用户信息获取失败，请尝试重新扫码登录或使用账号密码登录", parent=root)
                    reload_qrcode(qrcode, button, component)
                    return
                if r["result"]:
                    qrcode.configure(text="\n\n\n\n\n\n\n\n           登录成功", image="")
                    time.sleep(1)
                    for d in range(len(program_config)):
                        user_config = json.loads(decrypt(program_config[d]["user_config"], decrypt(program_config[d]["password"], password_key)))
                        if r["msg"]["puid"] == user_config["cx_login_config"]["uid"]:
                            if messagebox.askyesno("提示", "检测到当前学习通账号已与用户"+decrypt(program_config[d]["username"], username_key)+"绑定，是否直接以该用户的身份登录程序？", parent=root):
                                program_user = decrypt(program_config[d]["username"], username_key)
                                user_config["cx_login_config"]["cxname"] = r["msg"]["name"]
                                user_config["cx_login_config"]["cxcookies"] = json.dumps(session.cookies.get_dict())
                                last_login_time = user_config["last_login_time"]
                                user_config["last_login_time"] = int(time.time())
                                config = user_config
                                program_config[d]["user_config"] = encrypt(json.dumps(user_config), decrypt(program_config[d]["password"], password_key))
                                with open(realpath + "\\" + program_config_file, "w") as file:
                                    file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                                if last_login_time == 0:
                                    last_login_time = "未知"
                                else:
                                    last_login_time = datetime.datetime.fromtimestamp(last_login_time)
                                messagebox.showinfo("欢迎回来", "亲爱的" + str(r["msg"]["name"]) + "同学，欢迎使用学习通自动签到程序\n您上次登录时间：" + str(last_login_time), parent=root)
                                main_window(session, r["msg"]["name"], r["msg"]["puid"], component, config)
                                return
                            else:
                                break
                    covering_layer = ttk.Frame(root)
                    covering_layer.place(relwidth=1, relheight=1)
                    component.append(covering_layer)
                    word_tips = ttk.Label(covering_layer, text="设置您的程序访问用户名密码", font=tkFont.Font(size=20, family="黑体"))
                    word_tips.pack()
                    username_label = ttk.Label(covering_layer, text="程序访问用户名")
                    username_label.place(relx=0.3, rely=0.28)
                    username_input = ttk.Entry(covering_layer)
                    username_input.place(relx=0.3, rely=0.35, relwidth=0.4)
                    password_label = ttk.Label(covering_layer, text="程序访问密码")
                    password_label.place(relx=0.3, rely=0.48)
                    password_input = ttk.Entry(covering_layer, show="*")
                    password_input.place(relx=0.3, rely=0.55, relwidth=0.4)
                    var = tk.BooleanVar(value=False)
                    is_remember_password_checkbutton = ttk.Checkbutton(covering_layer, text="记住密码", variable=var)
                    is_remember_password_checkbutton.place(relx=0.71, rely=0.55)
                    tips_label = ttk.Label(covering_layer)
                    tips_label.place(relx=0.3, rely=0.65)
                    determine = ttk.Button(covering_layer, text="保存", command=lambda: search_and_save_config(uid=r["msg"]["puid"], cxname=r["msg"]["name"], session=session, username=username_input.get(), password=password_input.get(), component=component, remeber_password=var.get(), label=tips_label))
                    determine.place(relx=0.25, rely=0.75, relwidth=0.15, relheight=0.15)
                    Re_login = ttk.Button(covering_layer, text="返回", command=lambda: covering_layer.destroy())
                    Re_login.place(relx=0.6, rely=0.75, relwidth=0.15, relheight=0.15)
                    username_input.bind("<Return>", lambda event: search_and_save_config(uid=r["msg"]["puid"], cxname=r["msg"]["name"], session=session, username=username_input.get(), password=password_input.get(), component=component, remeber_password=var.get(), label=tips_label))
                    password_input.bind("<Return>", lambda event: search_and_save_config(uid=r["msg"]["puid"], cxname=r["msg"]["name"], session=session, username=username_input.get(), password=password_input.get(), component=component, remeber_password=var.get(), label=tips_label))
                    button.configure(text="重新加载", state="normal")
                    return
                else:
                    messagebox.showwarning("登录失败", "登录失败，请尝试重新扫码登录或使用账号密码登录！", parent=root)
                    reload_qrcode(qrcode, button, component)
                    return
            elif res["type"] == "4":
                is_scan = 1
                qrcode.configure(text="\n\n\n\n\n\n\n\n"+res["nickname"]+"扫码成功，请在手机上确认登录", image="")
            elif res["type"] == "6":
                is_scan = 3
                qrcode.configure(text="\n\n\n\n\n\n\n\n  用户取消登录，请重新加载二维码", image="")
                button.configure(text="重新加载", state="normal")
                break
            elif res["type"] == "1":
                is_scan = 3
                qrcode.configure(text="\n\n\n\n\n\n\n\n获取二维码登录状态时出错，请尝试重新加载二维码", image="")
                button.configure(text="重新加载", state="normal")
                break
            time.sleep(1)
        if (is_scan == 0 or is_scan == 4) and return_flag == 0:
            is_scan = 3
            qrcode.configure(text="\n\n\n\n\n\n\n\n  二维码已失效，请重新加载二维码", image="")
            button.configure(text="重新加载", state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_button_300(button):
    global is_scan
    try:
        for i in range(300, 0, -1):
            if is_scan == 0 or is_scan == 1:
                button.configure(text="大约"+str(i)+"秒后二维码将失效")
            elif is_scan == 5:
                return
            else:
                break
            time.sleep(1)
        is_scan = 4
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def main_window(session, name, uid, component, config):
    try:
        for c in component:
            c.destroy()
        root.geometry("1000x500")
        menu_account = tk.Menu(mainmenu, tearoff=False)
        mainmenu.insert_cascade(0, label="账号", menu=menu_account)
        menu_account.add_command(label="修改当前程序访问用户名或密码", command=change_username_or_password_window)
        menu_account.add_command(label="删除当前账号", command=lambda: delete_account([time_label, welcome_label, show_sign_config_area, tips_label, button1, button2, button3, button4]))
        menu_account.add_command(label="退出当前账号", command=lambda: exit_account([time_label, welcome_label, show_sign_config_area, tips_label, button1, button2, button3, button4]))
        thread_it(show_announcement)
        time_label = ttk.Label(root, text="当前系统时间："+time.strftime("%Y-%m-%d %H:%M:%S"), style="Blue.TLabel", font=tkFont.Font(size=10))
        time_label.pack()
        show_system_time(time_label, 1)
        welcome_label = ttk.Label(root, text="欢迎" + name + "同学", font=tkFont.Font(size=15, family="黑体"))
        welcome_label.pack()
        if config["cx_sign_config"]["address"] == "":
            address = "未设置"
            address_style = "Blue.TLabel"
        else:
            address = config["cx_sign_config"]["address"]
            address_style = "Green.TLabel"
        if config["cx_sign_config"]["longitude"] == "":
            longitude = "未设置"
            longitude_style = "Blue.TLabel"
        else:
            longitude = config["cx_sign_config"]["longitude"]
            longitude_style = "Green.TLabel"
        if config["cx_sign_config"]["latitude"] == "":
            latitude = "未设置"
            latitude_style = "Blue.TLabel"
        else:
            latitude = config["cx_sign_config"]["latitude"]
            latitude_style = "Green.TLabel"
        if config["cx_sign_config"]["pictureid"] == "":
            pictureid = "未设置"
            pictureid_style = "Blue.TLabel"
        else:
            pictureid = "已设置"
            pictureid_style = "Green.TLabel"
        show_sign_config_area = ttk.Frame(root)
        show_sign_config_area.place(rely=0.1, relwidth=1, relheight=0.15)
        address_label = ttk.Label(show_sign_config_area, text="全局位置信息：" + address, font=tkFont.Font(size=10), style=address_style)
        address_label.place(relx=0.1)
        longitude_label = ttk.Label(show_sign_config_area, text="全局经度信息：" + str(longitude), font=tkFont.Font(size=10), style=longitude_style)
        longitude_label.place(relx=0.1, rely=0.33)
        latitude_label = ttk.Label(show_sign_config_area, text="全局纬度信息：" + str(latitude), font=tkFont.Font(size=10), style=latitude_style)
        latitude_label.place(relx=0.6, rely=0.33)
        pictureid_label = ttk.Label(show_sign_config_area, text="全局拍照图片：" + pictureid, font=tkFont.Font(size=10), style=pictureid_style)
        pictureid_label.place(relx=0.1, rely=0.66)
        tips_label = ttk.Label(root, text="注意：在课程签到时程序将优先使用课程自定义的签到信息进行签到，若课程未设置自定义签到信息则将使用全局签到信息进行签到", font=tkFont.Font(size=10), style="Blue.TLabel")
        tips_label.place(relx=0.1, rely=0.25)
        button1 = ttk.Button(root, text="全部课程签到", command=lambda: sign_up_for_all_classes_window(session, name, [time_label, welcome_label, show_sign_config_area, tips_label, button1, button2, button3, button4]))
        button1.place(relx=0.1, rely=0.45, relwidth=0.3, relheight=0.1)
        button2 = ttk.Button(root, text="自定义课程签到", command=lambda: sign_up_for_customize_classes_window(session, name, [time_label, welcome_label, show_sign_config_area, tips_label, button1, button2, button3, button4]))
        button2.place(relx=0.6, rely=0.45, relwidth=0.3, relheight=0.1)
        button3 = ttk.Button(root, text="全局签到信息修改", command=lambda: example_modify_global_sign_in_information(session, name, uid, address_label, longitude_label, latitude_label, pictureid_label, [time_label, welcome_label, show_sign_config_area, tips_label, button1, button2, button3, button4]))
        button3.place(relx=0.1, rely=0.7, relwidth=0.3, relheight=0.1)
        button4 = ttk.Button(root, text="自定义签到信息修改", command=lambda: example_modify_customize_sign_in_information(session, name, [time_label, welcome_label, show_sign_config_area, tips_label, button1, button2, button3, button4]))
        button4.place(relx=0.6, rely=0.7, relwidth=0.3, relheight=0.1)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def sign_up_for_all_classes_window(session, name, component):
    global jiekou, frequency_input
    try:
        mainmenu.entryconfigure(1, state="disabled")
        sign_up_for_all_classes_all_area = ttk.Frame(root)
        sign_up_for_all_classes_all_area.place(relwidth=1, relheight=1)
        sign_up_for_all_classes_left_area = ttk.Frame(sign_up_for_all_classes_all_area)
        sign_up_for_all_classes_left_area.place(relwidth=0.5, relheight=1)
        time_label = ttk.Label(sign_up_for_all_classes_left_area, text="当前系统时间：" + time.strftime("%Y-%m-%d %H:%M:%S"), style="Blue.TLabel", font=tkFont.Font(size=10))
        time_label.pack()
        show_system_time(time_label, 2)
        welcome_label = ttk.Label(sign_up_for_all_classes_left_area, text="欢迎" + name + "同学", font=tkFont.Font(size=15, family="黑体"))
        welcome_label.pack()
        jiekou = tk.IntVar()
        jiekou.set(1)
        tips_label1 = ttk.Label(sign_up_for_all_classes_left_area, text="选择签到接口：", font=tkFont.Font(size=12, family="黑体"))
        tips_label1.place(relx=0.01, rely=0.2)
        jk1 = ttk.Radiobutton(sign_up_for_all_classes_left_area, variable=jiekou, text="接口1(IM协议实时接口)", value=1, command=lambda: change_the_frequency_input_box(tips_label2, "设置签到延时(单位:秒)："))
        jk1.place(relx=0.01, rely=0.25)
        jk2 = ttk.Radiobutton(sign_up_for_all_classes_left_area, variable=jiekou, text="接口2(APP接口)", value=2, command=lambda: change_the_frequency_input_box(tips_label2, "设置监控频率(单位:秒)："))
        jk2.place(relx=0.32, rely=0.25)
        jk3 = ttk.Radiobutton(sign_up_for_all_classes_left_area, variable=jiekou, text="接口3(网页接口)", value=3, command=lambda: change_the_frequency_input_box(tips_label2, "设置监控频率(单位:秒)："))
        jk3.place(relx=0.545, rely=0.25)
        jk4 = ttk.Radiobutton(sign_up_for_all_classes_left_area, variable=jiekou, text="接口4(教师接口)", value=4, command=lambda: change_the_frequency_input_box(tips_label2, "设置监控频率(单位:秒)："))
        jk4.place(relx=0.77, rely=0.25)
        tips_label2 = ttk.Label(sign_up_for_all_classes_left_area, text="设置签到延时(单位:秒)：", font=tkFont.Font(size=12, family="黑体"))
        tips_label2.place(relx=0.2, rely=0.41)
        frequency_input = ttk.Entry(sign_up_for_all_classes_left_area)
        frequency_input.place(relx=0.6, rely=0.41, relwidth=0.1)
        tips_label3 = ttk.Label(sign_up_for_all_classes_left_area, wraplength=400, justify="center", anchor="center", text="签到监控未启动", font=tkFont.Font(size=12, family="黑体"))
        tips_label3.place(relx=0.03, rely=0.5, relwidth=0.94, relheight=0.25)
        component.append(sign_up_for_all_classes_all_area)
        start_button = ttk.Button(sign_up_for_all_classes_left_area, text="启动监控", command=lambda: thread_it(start_sign_up_for_all_classes, jiekou.get(), frequency_input.get(), session, tips_label3, Text, start_button, time_label, [frequency_input, jk1, jk2, jk3, jk4, return_button], component))
        start_button.place(relx=0.2, rely=0.8, relwidth=0.2, relheight=0.1)
        return_button = ttk.Button(sign_up_for_all_classes_left_area, text="返回", command=lambda: return_main_window(time_label, [sign_up_for_all_classes_all_area]))
        return_button.place(relx=0.6, rely=0.8, relwidth=0.2, relheight=0.1)
        sign_up_for_all_classes_right_area = ttk.Labelframe(sign_up_for_all_classes_all_area, text=" 签到监控详细信息 ")
        sign_up_for_all_classes_right_area.place(relx=0.5, relwidth=0.5, relheight=1)
        scrollbar = tk.Scrollbar(sign_up_for_all_classes_right_area)
        scrollbar.place(relx=0.95, relheight=1)
        Text = tk.Text(sign_up_for_all_classes_right_area, yscrollcommand=scrollbar.set, state="disabled")
        Text.place(relwidth=0.95, relheight=1)
        scrollbar.configure(command=Text.yview())
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def start_sign_up_for_all_classes(num, frequency, session, label, text, button, time_label, component1, component2):
    global successful_sign_in_number, number_of_detected_sign_in, is_reconnect, interface_num, signed_in_list, sign_error_num
    try:
        if frequency == "":
            if num == 1:
                messagebox.showwarning("签到延时设置错误", "请设置签到延时", parent=root)
            else:
                messagebox.showwarning("监控频率设置错误", "请设置监控频率", parent=root)
            return
        try:
            frequency = float(frequency)
            if frequency < 0:
                if num == 1:
                    messagebox.showwarning("签到延时设置错误", "签到延时不能小于0秒，请重新设置", parent=root)
                else:
                    messagebox.showwarning("监控频率设置错误", "监控频率不能小于0秒，请重新设置", parent=root)
                component1[0].focus_force()
                return
            elif num == 1 and frequency < 10:
                if not messagebox.askyesno("提示", "检测到您设置的签到延时小于10秒，这可能导致教师发布签到后程序就会立即签到造成秒签，建议签到延时设置大于10秒以防止秒签\n选择“是”，忽略此警告，继续监控，选择“否”，则将停止监控，您可以重新设置签到延时\n是否继续？", parent=root):
                    component1[0].focus_force()
                    return
            elif num != 1 and frequency < 60:
                if not messagebox.askyesno("提示", "检测到您设置的监控频率小于60秒，为尽可能防止频繁请求接口导致接口被暂时封禁，强烈建议您设置的监控频率不要小于60秒\n选择“是”，忽略此警告，继续监控，选择“否”，则将停止监控，您可以重新设置监控频率\n是否继续？", parent=root):
                    component1[0].focus_force()
                    return
        except:
            if num == 1:
                messagebox.showwarning("签到延时设置错误", "签到延时的格式只能为数字，请重新设置", parent=root)
            else:
                messagebox.showwarning("监控频率设置错误", "监控频率的格式只能为数字，请重新设置", parent=root)
            component1[0].focus_force()
            return
        if num == 1:
            if not messagebox.askyesno("提示", "接口一仅在老师发布签到时才可以收到签到信息，若您在老师发布签到后使用接口一进行签到监控则可能无法收到签到信息，此时建议您使用其它三个接口进行签到监控\n是否继续使用接口一进行签到监控？", parent=root):
                return
            else:
                is_reconnect = 0
        button.configure(state="disabled")
        for c in component1:
            c.configure(state="disabled")
        show_message(text, "开始获取课程列表")
        label.configure(text="正在获取课程列表……")
        course_list = get_the_course_list(session, [component2[0], time_label], component2)
        if type(course_list) is list:
            show_message(text, "课程列表获取成功")
            button.configure(text="停止监控", command=lambda: thread_it(stop_sign_up_for_all_classes, 0, num, session, label, text, button, time_label, component1, component2), state="normal")
        elif course_list == 1:
            button.configure(state="normal")
            for c in component1:
                c.configure(state="normal")
            button.configure(text="启动监控", command=lambda: thread_it(start_sign_up_for_all_classes, jiekou.get(), frequency_input.get(), session, label, text, button, time_label, component1, component2))
            show_message(text, "课程列表获取失败，签到监控停止")
            label.configure(text="签到监控未启动")
            return
        else:
            return
        number_of_detected_sign_in = 0
        successful_sign_in_number = 0
        is_find = 0
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                is_find = 1
                user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                uid = user_config["cx_login_config"]["uid"]
                name = user_config["cx_login_config"]["cxname"]
                schoolid = user_config["cx_login_config"]["cxschoolid"]
                address = user_config["cx_sign_config"]["address"]
                latitude = user_config["cx_sign_config"]["latitude"]
                longitude = user_config["cx_sign_config"]["longitude"]
                pictureid = user_config["cx_sign_config"]["pictureid"]
                advance_config = user_config["advance_config"]
                signed_in_list = user_config["signed_in_list"]
                course_parameters = user_config["course_parameters"]
                break
        if is_find == 0:
            for c in component1:
                c.configure(state="normal")
            button.configure(text="启动监控", command=lambda: thread_it(start_sign_up_for_all_classes, jiekou.get(), frequency_input.get(), session, label, text, button, time_label, component1, component2))
            show_message(text, "课程列表获取失败，签到监控停止")
            label.configure(text="签到监控未启动")
            return
        if schoolid == "":
            schoolid = "0"
        if num == 1:
            show_message(text, "签到监控已启动，当前监控接口为接口1，监控范围为全部课程，签到延时为" + str(frequency) + "秒")
            label.configure(text="正在与websockets建立连接……")
            thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, 1, uid, name, address, latitude, longitude, pictureid, advance_config)
        else:
            interface_num = num
            sign_error_num = 1
            show_message(text, "签到监控已启动，当前监控接口为接口"+str(interface_num)+"，监控范围为全部课程，监控频率为" + str(frequency) + "秒")
            label.configure(text="课程列表获取成功")
            thread_it(start_sign, 0, course_list, sign_num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def sign_up_for_customize_classes_window(session, name, component):
    global CheckVar1, CheckVar2, CheckVar3, CheckVar4, CheckVar5, CheckVar6, jiekou, frequency_input, year1, month1, day1, hour1, minute1, second1, year2, month2, day2, hour2, minute2, second2, stop_sign_num
    try:
        mainmenu.entryconfigure(1, state="disabled")
        root.geometry("1500x750")
        sign_up_for_customize_classes_all_area = ttk.Frame(root)
        sign_up_for_customize_classes_all_area.place(relwidth=1, relheight=1)
        time_label = ttk.Label(sign_up_for_customize_classes_all_area, text="当前系统时间：" + time.strftime("%Y-%m-%d %H:%M:%S"), style="Blue.TLabel", font=tkFont.Font(size=10))
        time_label.pack()
        show_system_time(time_label, 2)
        welcome_label = ttk.Label(sign_up_for_customize_classes_all_area, text="欢迎" + name + "同学", font=tkFont.Font(size=15, family="黑体"))
        welcome_label.pack()
        course_listbox_area = ttk.Labelframe(sign_up_for_customize_classes_all_area, text="请选择一个或多个要签到的课程")
        tips_label = ttk.Label(course_listbox_area, text="正在获取课程列表……")
        tips_label.pack()
        component.append(sign_up_for_customize_classes_all_area)
        course_listbox_area.place(relwidth=0.3, relheight=1)
        CheckVar1 = tk.BooleanVar(value=False)
        CheckVar2 = tk.BooleanVar(value=False)
        CheckVar3 = tk.BooleanVar(value=False)
        CheckVar4 = tk.BooleanVar(value=False)
        CheckVar5 = tk.BooleanVar(value=False)
        CheckVar6 = tk.BooleanVar(value=False)
        jiekou = tk.IntVar(value=1)
        checkbutton1 = ttk.Checkbutton(sign_up_for_customize_classes_all_area, text="设置监控启动时间", variable=CheckVar1, command=lambda: change_checkbutton(CheckVar1.get(), [year1, month1, day1, hour1, minute1, second1]))
        checkbutton1.place(relx=0.305, rely=0.1)
        year1 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        year1["values"] = [datetime.datetime.now().year, datetime.datetime.now().year+1]
        year1.set(year1["values"][0])
        year1.place(relx=0.305, rely=0.15, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="年").place(relx=0.355, rely=0.15)
        month1 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        month1["values"] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        month1.set(datetime.datetime.now().month)
        month1.place(relx=0.365, rely=0.15, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="月").place(relx=0.415, rely=0.15)
        day1 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        day1.place(relx=0.425, rely=0.15, relwidth=0.05)
        year1.bind("<<ComboboxSelected>>", lambda event: change_day_list(year1.get(), month1.get(), day1))
        month1.bind("<<ComboboxSelected>>", lambda event: change_day_list(year1.get(), month1.get(), day1))
        change_day_list(year1.get(), month1.get(), day1)
        ttk.Label(sign_up_for_customize_classes_all_area, text="日").place(relx=0.475, rely=0.15)
        hour1 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        hour1["values"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        hour1.set(datetime.datetime.now().hour)
        hour1.place(relx=0.485, rely=0.15, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="时").place(relx=0.535, rely=0.15)
        minute1 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        minute1["values"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
        minute1.set(datetime.datetime.now().minute)
        minute1.place(relx=0.545, rely=0.15, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="分").place(relx=0.595, rely=0.15)
        second1 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        second1["values"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
        second1.set(datetime.datetime.now().second)
        second1.place(relx=0.605, rely=0.15, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="秒启动监控").place(relx=0.655, rely=0.15)
        checkbutton2 = ttk.Checkbutton(sign_up_for_customize_classes_all_area, text="设置监控停止时间", variable=CheckVar2, command=lambda: change_checkbutton(CheckVar2.get(), [year2, month2, day2, hour2, minute2, second2]))
        checkbutton2.place(relx=0.305, rely=0.2)
        year2 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        year2["values"] = [datetime.datetime.now().year, datetime.datetime.now().year + 1]
        year2.set(year2["values"][0])
        year2.place(relx=0.305, rely=0.25, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="年").place(relx=0.355, rely=0.25)
        month2 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        month2["values"] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        month2.set(datetime.datetime.now().month)
        month2.place(relx=0.365, rely=0.25, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="月").place(relx=0.415, rely=0.25)
        day2 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        day2.place(relx=0.425, rely=0.25, relwidth=0.05)
        year2.bind("<<ComboboxSelected>>", lambda event: change_day_list(year2.get(), month2.get(), day2))
        month2.bind("<<ComboboxSelected>>", lambda event: change_day_list(year2.get(), month2.get(), day2))
        change_day_list(year2.get(), month2.get(), day2)
        ttk.Label(sign_up_for_customize_classes_all_area, text="日").place(relx=0.475, rely=0.25)
        hour2 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        hour2["values"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        hour2.set(datetime.datetime.now().hour)
        hour2.place(relx=0.485, rely=0.25, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="时").place(relx=0.535, rely=0.25)
        minute2 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        minute2["values"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
        minute2.set(datetime.datetime.now().minute)
        minute2.place(relx=0.545, rely=0.25, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="分").place(relx=0.595, rely=0.25)
        second2 = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        second2["values"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
        second2.set(datetime.datetime.now().second)
        second2.place(relx=0.605, rely=0.25, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="秒停止监控").place(relx=0.655, rely=0.25)
        checkbutton3 = ttk.Checkbutton(sign_up_for_customize_classes_all_area, text="设置完成签到自动停止次数", variable=CheckVar3, command=lambda: change_checkbutton(CheckVar3.get(), [stop_sign_num]))
        checkbutton3.place(relx=0.305, rely=0.3)
        ttk.Label(sign_up_for_customize_classes_all_area, text="程序成功完成").place(relx=0.305, rely=0.35)
        stop_sign_num = ttk.Combobox(sign_up_for_customize_classes_all_area, state="disabled")
        stop_sign_num["values"] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        stop_sign_num.set(stop_sign_num["values"][0])
        stop_sign_num.place(relx=0.355, rely=0.35, relwidth=0.05)
        ttk.Label(sign_up_for_customize_classes_all_area, text="次签到后自动停止签到").place(relx=0.405, rely=0.35)
        use_someone_photo_checkbutton = ttk.Checkbutton(sign_up_for_customize_classes_all_area, text="检测到拍照签到时随机使用其他已签到同学的拍照图片", variable=CheckVar4)
        use_someone_photo_checkbutton.place(relx=0.305, rely=0.4)
        use_someone_location_checkbutton = ttk.Checkbutton(sign_up_for_customize_classes_all_area, text="检测到位置签到时随机使用其他已签到同学的位置信息", variable=CheckVar5)
        use_someone_location_checkbutton.place(relx=0.305, rely=0.45)
        anti_fishing_check_in_mode_button = ttk.Checkbutton(sign_up_for_customize_classes_all_area, text="反钓鱼签到模式，仅在已签人数多于未签人数时签到（不对二维码签到生效且会使接口1的签到延时失效）", variable=CheckVar6)
        anti_fishing_check_in_mode_button.place(relx=0.305, rely=0.5)
        tips_label1 = ttk.Label(sign_up_for_customize_classes_all_area, text="选择签到接口：", font=tkFont.Font(size=12, family="黑体"))
        tips_label1.place(relx=0.32, rely=0.55)
        jk1 = ttk.Radiobutton(sign_up_for_customize_classes_all_area, variable=jiekou, text="接口1(IM协议实时接口)", value=1, command=lambda: change_the_frequency_input_box(tips_label2, "设置签到延时(单位:秒)："))
        jk1.place(relx=0.32, rely=0.6)
        jk2 = ttk.Radiobutton(sign_up_for_customize_classes_all_area, variable=jiekou, text="接口2(APP接口)", value=2, command=lambda: change_the_frequency_input_box(tips_label2, "设置监控频率(单位:秒)："))
        jk2.place(relx=0.434, rely=0.6)
        jk3 = ttk.Radiobutton(sign_up_for_customize_classes_all_area, variable=jiekou, text="接口3(网页接口)", value=3, command=lambda: change_the_frequency_input_box(tips_label2, "设置监控频率(单位:秒)："))
        jk3.place(relx=0.522, rely=0.6)
        jk4 = ttk.Radiobutton(sign_up_for_customize_classes_all_area, variable=jiekou, text="接口4(教师接口)", value=4, command=lambda: change_the_frequency_input_box(tips_label2, "设置监控频率(单位:秒)："))
        jk4.place(relx=0.61, rely=0.6)
        tips_label2 = ttk.Label(sign_up_for_customize_classes_all_area, text="设置签到延时(单位:秒)：", font=tkFont.Font(size=12, family="黑体"))
        tips_label2.place(relx=0.39, rely=0.65)
        frequency_input = ttk.Entry(sign_up_for_customize_classes_all_area)
        frequency_input.place(relx=0.52, rely=0.65, relwidth=0.07)
        tips_label3 = ttk.Label(sign_up_for_customize_classes_all_area, wraplength=600, justify="center", anchor="center", text="签到监控未启动", font=tkFont.Font(size=12, family="黑体"))
        tips_label3.place(relx=0.3, rely=0.7, relwidth=0.4, relheight=0.15)
        start_button = ttk.Button(sign_up_for_customize_classes_all_area, text="启动监控", command=lambda: thread_it(start_sign_up_for_customize_classes, jiekou.get(), frequency_input.get(), session, tips_label3, Text, start_button, time_label, [course_listbox, select_all_items_button, deselect_all_items_button, checkbutton1, year1, month1, day1, hour1, minute1, second1, checkbutton2, year2, month2, day2, hour2, minute2, second2, checkbutton3, stop_sign_num, use_someone_photo_checkbutton, use_someone_location_checkbutton, anti_fishing_check_in_mode_button, frequency_input, jk1, jk2, jk3, jk4, return_button], component), state="disabled")
        thread_it(get_course_list, session, tips_label, course_listbox_area, start_button, tips_label, component)
        start_button.place(relx=0.35, rely=0.85, relwidth=0.1, relheight=0.1)
        return_button = ttk.Button(sign_up_for_customize_classes_all_area, text="返回", command=lambda: return_main_window(time_label, [sign_up_for_customize_classes_all_area]))
        return_button.place(relx=0.55, rely=0.85, relwidth=0.1, relheight=0.1)
        sign_up_for_customize_classes_right_area = ttk.Labelframe(sign_up_for_customize_classes_all_area, text=" 签到监控详细信息 ")
        sign_up_for_customize_classes_right_area.place(relx=0.7, relwidth=0.3, relheight=1)
        scrollbar = tk.Scrollbar(sign_up_for_customize_classes_right_area)
        scrollbar.place(relx=0.96, relheight=1)
        Text = tk.Text(sign_up_for_customize_classes_right_area, yscrollcommand=scrollbar.set, state="disabled")
        Text.place(relwidth=0.96, relheight=1)
        scrollbar.configure(command=Text.yview())
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def start_sign_up_for_customize_classes(num, frequency, session, label, text, button, time_label, component1, component2):
    global successful_sign_in_number, number_of_detected_sign_in, is_reconnect, signed_in_list, is_connect, is_reconnect, is_loop
    try:
        if frequency == "":
            if num == 1:
                messagebox.showwarning("签到延时设置错误", "请设置签到延时", parent=root)
            else:
                messagebox.showwarning("监控频率设置错误", "请设置监控频率", parent=root)
            return
        try:
            frequency = float(frequency)
            if frequency < 0:
                if num == 1:
                    messagebox.showwarning("签到延时设置错误", "签到延时不能小于0秒，请重新设置", parent=root)
                else:
                    messagebox.showwarning("监控频率设置错误", "监控频率不能小于0秒，请重新设置", parent=root)
                component1[0].focus_force()
                return
            elif num == 1 and frequency < 10:
                if not messagebox.askyesno("提示", "检测到您设置的签到延时小于10秒，这可能导致教师发布签到后程序就会立即签到造成秒签，建议签到延时设置大于10秒以防止秒签\n选择“是”，忽略此警告，继续监控，选择“否”，则将停止监控，您可以重新设置签到延时\n是否继续？", parent=root):
                    component1[0].focus_force()
                    return
            elif num != 1 and frequency < 60:
                if not messagebox.askyesno("提示", "检测到您设置的监控频率小于60秒，为尽可能防止频繁请求接口导致接口被暂时封禁，强烈建议您设置的监控频率不要小于60秒\n选择“是”，忽略此警告，继续监控，选择“否”，则将停止监控，您可以重新设置监控频率\n是否继续？", parent=root):
                    component1[0].focus_force()
                    return
        except:
            if num == 1:
                messagebox.showwarning("签到延时设置错误", "签到延时的格式只能为数字，请重新设置", parent=root)
            else:
                messagebox.showwarning("监控频率设置错误", "监控频率的格式只能为数字，请重新设置", parent=root)
            component1[0].focus_force()
            return
        if CheckVar1.get():
            start_timestamp = datetime.datetime.strptime(year1.get()+"-"+month1.get()+"-"+day1.get()+" "+hour1.get()+":"+minute1.get()+":"+second1.get(), "%Y-%m-%d %H:%M:%S").timestamp()
        else:
            start_timestamp = time.time()
        if CheckVar2.get():
            end_timestamp = datetime.datetime.strptime(year2.get()+"-"+month2.get()+"-"+day2.get()+" "+hour2.get()+":"+minute2.get()+":"+second2.get(), "%Y-%m-%d %H:%M:%S").timestamp()
            if start_timestamp > end_timestamp:
                messagebox.showwarning("签到时间设置错误", "设置的签到监控启动时间不能晚于设置的签到监控停止时间", parent=root)
                return
            if end_timestamp < time.time():
                messagebox.showwarning("签到时间设置错误", "设置的签到监控停止时间不能早于当前时间", parent=root)
                return
        if num == 1:
            is_connect = 0
            is_reconnect = 0
            if not messagebox.askyesno("提示", "接口一仅在老师发布签到时才可以收到签到信息，若您在老师发布签到后使用接口一进行签到监控则可能无法收到签到信息，此时建议您使用其它三个接口进行签到监控\n是否继续使用接口一进行签到监控？", parent=root):
                return
            else:
                is_reconnect = 0
        button.configure(state="disabled")
        for c in component1:
            c.configure(state="disabled")
        is_loop = False
        button.configure(text="停止监控", command=lambda: thread_it(stop_sign_up_for_customize_classes, 0, num, session, label, text, button, time_label, component1, component2), state="normal")
        number_of_detected_sign_in = 0
        successful_sign_in_number = 0
        is_find = 0
        course_list = []
        for i in course_listbox.curselection():
            course_list.append(customize_course_list[i])
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                is_find = 1
                user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                uid = user_config["cx_login_config"]["uid"]
                name = user_config["cx_login_config"]["cxname"]
                schoolid = user_config["cx_login_config"]["cxschoolid"]
                address = user_config["cx_sign_config"]["address"]
                latitude = user_config["cx_sign_config"]["latitude"]
                longitude = user_config["cx_sign_config"]["longitude"]
                pictureid = user_config["cx_sign_config"]["pictureid"]
                advance_config = user_config["advance_config"]
                signed_in_list = user_config["signed_in_list"]
                course_parameters = user_config["course_parameters"]
                break
        if is_find == 0:
            for c in component1:
                c.configure(state="normal")
            button.configure(text="启动监控", command=lambda: thread_it(start_sign_up_for_customize_classes, jiekou.get(), frequency_input.get(), session, label, text, button, time_label, component1, component2))
            show_message(text, "数据加载异常，签到监控停止")
            label.configure(text="签到监控未启动")
            return
        if schoolid == "":
            schoolid = "0"
        select_course_list = []
        for _l in course_listbox.curselection():
            select_course_list.append("“"+course_listbox.get(_l)+"”")
        customize_sign_control_center(0, num, sign_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def stop_sign_up_for_customize_classes(n, num, session, label, text, button, time_label, component1, component2):
    global sign_num, qrcode_sign_list, is_reconnect, is_connect
    try:
        sign_num += 1
        if is_loop:
            root.after_cancel(check_sign_id)
        if check_qrcode_sign_window_list != {}:
            for ch in check_qrcode_sign_window_list.keys():
                check_qrcode_sign_window_list[ch].destroy()
        if len(qrcode_sign_list) > 0:
            root.after_cancel(qrcode_sign_ws_heartbeat_after_id)
            qrcode_sign_ws.close()
        qrcode_sign_list = []
        if num == 1:
            button.configure(state="disabled")
            if is_reconnect:
                root.after_cancel(ws_connect_after_id)
                ws.close()
                is_reconnect = 0
            if is_connect:
                root.after_cancel(ws_heartbeat_after_id)
                ws.close()
                is_connect = 0
        label.configure(text="签到监控未启动")
        button.configure(text="启动监控", command=lambda: thread_it(start_sign_up_for_customize_classes, jiekou.get(), frequency_input.get(), session, label, text, button, time_label, component1, component2), state="normal")
        if n == 0:
            show_message(text, "签到监控已停止")
        elif n == 1:
            show_message(text, "指定签到监控停止时间已到，签到监控已停止")
        elif n == 2:
            show_message(text, "程序成功完成签到数量已达设定值，签到监控已停止")
        elif n == 3:
            show_message(text, "websockets连接超时次数过多，签到监控已停止")
        for c in component1:
            c.configure(state="normal")
        if not CheckVar1.get():
            year1.configure(state="disabled")
            month1.configure(state="disabled")
            day1.configure(state="disabled")
            hour1.configure(state="disabled")
            minute1.configure(state="disabled")
            second1.configure(state="disabled")
        if not CheckVar2.get():
            year2.configure(state="disabled")
            month2.configure(state="disabled")
            day2.configure(state="disabled")
            hour2.configure(state="disabled")
            minute2.configure(state="disabled")
            second2.configure(state="disabled")
        if not CheckVar3.get():
            stop_sign_num.configure(state="disabled")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def customize_sign_control_center(n, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters):
    global interface_num, sign_error_num, check_sign_id, sign_num, qrcode_sign_list, is_loop
    try:
        if sign_num != s_num:
            return
        if CheckVar1.get() and CheckVar2.get():
            start_timestamp = datetime.datetime.strptime(year1.get() + "-" + month1.get() + "-" + day1.get() + " " + hour1.get() + ":" + minute1.get() + ":" + second1.get(), "%Y-%m-%d %H:%M:%S").timestamp()
            end_timestamp = datetime.datetime.strptime(year2.get() + "-" + month2.get() + "-" + day2.get() + " " + hour2.get() + ":" + minute2.get() + ":" + second2.get(), "%Y-%m-%d %H:%M:%S").timestamp()
            if time.time() < start_timestamp:
                is_loop = True
                label.configure(text="等待"+year1.get() + "年" + month1.get() + "月" + day1.get() + "日" + hour1.get() + "时" + minute1.get() + "分" + second1.get()+"秒启动监控")
                check_sign_id = root.after(100, lambda: customize_sign_control_center(0, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters))
            elif start_timestamp <= time.time() < end_timestamp and n == 0:
                is_loop = True
                if num == 1:
                    show_message(text, "签到监控已启动，当前监控接口为接口1，监控课程为"+"、".join(select_course_list)+"，签到延时为" + str(frequency) + "秒")
                    label.configure(text="正在与websockets建立连接……")
                    thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, 1, uid, name, address, latitude, longitude, pictureid, advance_config, CheckVar3.get(), False, course_list)
                else:
                    interface_num = num
                    sign_error_num = 1
                    show_message(text, "签到监控已启动，当前监控接口为接口"+str(interface_num)+"，监控课程为"+"、".join(select_course_list)+"，监控频率为" + str(frequency) + "秒")
                    label.configure(text="课程列表获取成功")
                    thread_it(start_sign, 0, course_list, sign_num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, CheckVar3.get(), False)
                check_sign_id = root.after(100, lambda: customize_sign_control_center(1, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters))
            elif end_timestamp <= time.time():
                is_loop = False
                thread_it(stop_sign_up_for_customize_classes, 1, num, session, label, text, button, time_label, component1, component2)
            else:
                is_loop = True
                check_sign_id = root.after(100, lambda: customize_sign_control_center(n, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters))
        elif CheckVar1.get():
            start_timestamp = datetime.datetime.strptime(year1.get() + "-" + month1.get() + "-" + day1.get() + " " + hour1.get() + ":" + minute1.get() + ":" + second1.get(), "%Y-%m-%d %H:%M:%S").timestamp()
            if time.time() < start_timestamp:
                is_loop = True
                label.configure(text="等待"+year1.get() + "年" + month1.get() + "月" + day1.get() + "日" + hour1.get() + "时" + minute1.get() + "分" + second1.get()+"秒启动监控")
                check_sign_id = root.after(100, lambda: customize_sign_control_center(0, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters))
            elif start_timestamp <= time.time():
                is_loop = False
                if num == 1:
                    show_message(text, "签到监控已启动，当前监控接口为接口1，监控课程为"+"、".join(select_course_list)+"，签到延时为" + str(frequency) + "秒")
                    label.configure(text="正在与websockets建立连接……")
                    thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, 1, uid, name, address, latitude, longitude, pictureid, advance_config, CheckVar3.get(), False, course_list)
                else:
                    interface_num = num
                    sign_error_num = 1
                    show_message(text, "签到监控已启动，当前监控接口为接口"+str(interface_num)+"，监控课程为"+"、".join(select_course_list)+"，监控频率为" + str(frequency) + "秒")
                    label.configure(text="课程列表获取成功")
                    thread_it(start_sign, 0, course_list, sign_num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, CheckVar3.get(), False)
        elif CheckVar2.get():
            end_timestamp = datetime.datetime.strptime(year2.get() + "-" + month2.get() + "-" + day2.get() + " " + hour2.get() + ":" + minute2.get() + ":" + second2.get(), "%Y-%m-%d %H:%M:%S").timestamp()
            if time.time() < end_timestamp and n == 0:
                is_loop = True
                if num == 1:
                    show_message(text, "签到监控已启动，当前监控接口为接口1，监控课程为"+"、".join(select_course_list)+"，签到延时为" + str(frequency) + "秒")
                    label.configure(text="正在与websockets建立连接……")
                    thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, 1, uid, name, address, latitude, longitude, pictureid, advance_config, CheckVar3.get(), False, course_list)
                else:
                    interface_num = num
                    sign_error_num = 1
                    show_message(text, "签到监控已启动，当前监控接口为接口"+str(interface_num)+"，监控课程为"+"、".join(select_course_list)+"，监控频率为" + str(frequency) + "秒")
                    label.configure(text="课程列表获取成功")
                    thread_it(start_sign, 0, course_list, sign_num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, CheckVar3.get(), False)
                check_sign_id = root.after(100, lambda: customize_sign_control_center(1, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters))
            elif end_timestamp <= time.time():
                is_loop = False
                thread_it(stop_sign_up_for_customize_classes, 1, num, session, label, text, button, time_label, component1, component2)
            else:
                is_loop = True
                check_sign_id = root.after(100, lambda: customize_sign_control_center(n, num, s_num, text, frequency, label, session, button, time_label, component1, component2, course_list, select_course_list, uid, schoolid, name, address, latitude, longitude, pictureid, advance_config, course_parameters))
        else:
            is_loop = False
            if num == 1:
                show_message(text, "签到监控已启动，当前监控接口为接口1，监控课程为" + "、".join(select_course_list) + "，签到延时为" + str(frequency) + "秒")
                label.configure(text="正在与websockets建立连接……")
                thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, 1, uid, name, address, latitude, longitude, pictureid, advance_config, CheckVar3.get(), False, course_list)
            else:
                interface_num = num
                sign_error_num = 1
                show_message(text, "签到监控已启动，当前监控接口为接口" + str(interface_num) + "，监控课程为" + "、".join(select_course_list) + "，监控频率为" + str(frequency) + "秒")
                label.configure(text="课程列表获取成功")
                thread_it(start_sign, 0, course_list, sign_num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, CheckVar3.get(), False)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_day_list(year, month, days):
    try:
        num_days = calendar.monthrange(int(year), int(month))[1]
        # 生成天数列表
        days_list = list(range(1, num_days + 1))
        days["values"] = days_list
        days.set(datetime.datetime.now().day)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def example_modify_global_sign_in_information(session, name, uid, address_label, longitude_label, latitude_label, pictureid_label, component):
    global is_query, picturesid
    try:
        is_find = 0
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                is_find = 1
                user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                address = user_config["cx_sign_config"]["address"]
                longitude = user_config["cx_sign_config"]["longitude"]
                latitude = user_config["cx_sign_config"]["latitude"]
                pictureid = user_config["cx_sign_config"]["pictureid"]
                break
        if is_find == 0:
            messagebox.showwarning("加载失败", "用户配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
            component[0].after_cancel(timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            login_window(0, component)
            return
        is_query = False
        mainmenu.entryconfigure(1, state="disabled")
        example_modify_global_sign_in_information_area = ttk.Frame(root)
        example_modify_global_sign_in_information_area.place(relwidth=1, relheight=1)
        time_label = ttk.Label(example_modify_global_sign_in_information_area, text="当前系统时间：" + time.strftime("%Y-%m-%d %H:%M:%S"), style="Blue.TLabel", font=tkFont.Font(size=10))
        time_label.pack()
        show_system_time(time_label, 2)
        welcome_label = ttk.Label(example_modify_global_sign_in_information_area, text="欢迎" + name + "同学", font=tkFont.Font(size=15, family="黑体"))
        welcome_label.pack()
        left_area = ttk.Labelframe(example_modify_global_sign_in_information_area, text="位置信息修改")
        left_area.place(rely=0.1, relwidth=0.5, relheight=0.7)
        ttk.Label(left_area, text="各大地图经纬度在线查询（注：相同地点的经纬度在三个地图中略有不同）").place(relx=0.1, rely=0)
        button1 = ttk.Button(left_area, text="百度地图", command=lambda: webbrowser.open("https://api.map.baidu.com/lbsapi/getpoint/index.html"))
        button1.place(relx=0.1, rely=0.07, relheight=0.1)
        button2 = ttk.Button(left_area, text="高德地图", command=lambda: webbrowser.open("https://lbs.amap.com/tools/picker"))
        button2.place(relx=0.4, rely=0.07, relheight=0.1)
        button3 = ttk.Button(left_area, text="腾讯地图", command=lambda: webbrowser.open("https://lbs.qq.com/getPoint/"))
        button3.place(relx=0.7, rely=0.07, relheight=0.1)
        ttk.Label(left_area, text="输入地点名，一键获取位置信息（百度地图接口，仅支持国内地址解析）").place(relx=0.1, rely=0.17)
        place_name_input = ttk.Entry(left_area)
        place_name_input.place(relx=0.1, rely=0.245, relwidth=0.6)
        place_name_query_button = ttk.Button(left_area, text="立即获取", command=lambda: thread_it(query_longitude_and_latitude, place_name_input.get(), address_combobox, tips_label, longitude_input, latitude_input))
        place_name_query_button.place(relx=0.7, rely=0.24)
        tips_label = ttk.Label(left_area)
        tips_label.place(relx=0.1, rely=0.315)
        ttk.Label(left_area, text="输入或选择新的位置信息：").place(relx=0.1, rely=0.38)
        address_combobox = ttk.Combobox(left_area)
        address_combobox["values"] = address
        address_combobox.set(address)
        address_combobox.bind("<<ComboboxSelected>>", lambda event: change_longitude_and_latitude(address_combobox, longitude_input, latitude_input))
        address_combobox.place(relx=0.1, rely=0.45, relwidth=0.8)
        ttk.Label(left_area, text="输入新的经度信息（范围-180~180，-180~0为西经，0~180为东经）").place(relx=0.1, rely=0.52)
        ttk.Label(left_area, text="若要清除经度信息请留空").place(relx=0.1, rely=0.59)
        longitude_input = ttk.Entry(left_area)
        if longitude == "未设置":
            longitude = ""
        longitude_input.delete(0, tk.END)
        longitude_input.insert(0, longitude)
        longitude_input.place(relx=0.1, rely=0.665, relwidth=0.65)
        empty_longitude_button = ttk.Button(left_area, text="一键清空", command=lambda: empty_longitude(longitude_input))
        empty_longitude_button.place(relx=0.75, rely=0.66)
        ttk.Label(left_area, text="输入新的纬度信息（范围-90~90，其中-90~0为南纬，0~90为北纬）").place(relx=0.1, rely=0.74)
        ttk.Label(left_area, text="若要清除纬度信息请留空").place(relx=0.1, rely=0.81)
        latitude_input = ttk.Entry(left_area)
        if latitude == "未设置":
            latitude = ""
        latitude_input.delete(0, tk.END)
        latitude_input.insert(0, latitude)
        latitude_input.place(relx=0.1, rely=0.885, relwidth=0.65)
        empty_latitude_button = ttk.Button(left_area, text="一键清空", command=lambda: empty_longitude(latitude_input))
        empty_latitude_button.place(relx=0.75, rely=0.88)
        right_area = ttk.Labelframe(example_modify_global_sign_in_information_area, text="拍照图片修改")
        right_area.place(relx=0.5, rely=0.1, relwidth=0.5, relheight=0.7)
        picture_preview_area = ttk.Labelframe(right_area, text="拍照图片预览")
        thread_it(load_chaoxingyunpan_picture, session, pictureid, picture_preview_area)
        picturesid = pictureid
        picture_preview_area.place(relheight=0.76, relwidth=1)
        ttk.Label(right_area, text="修改拍照图片").place(relx=0.1, rely=0.76)
        from_file_button = ttk.Button(right_area, text="从文件中选择", command=lambda: choose_file(tips_from_change_label))
        from_file_button.place(relx=0.1, rely=0.83, relheight=0.1)
        from_shear_plate_button = ttk.Button(right_area, text="从剪切板中加载", command=lambda: check_shear_plate_picture(tips_from_change_label))
        from_shear_plate_button.place(relx=0.4, rely=0.83, relheight=0.1)
        clear_picture_button = ttk.Button(right_area, text="清除拍照图片", command=lambda: clear_picture(tips_from_change_label))
        clear_picture_button.place(relx=0.7, rely=0.83, relheight=0.1)
        tips_from_change_label = ttk.Label(right_area)
        tips_from_change_label.place(relx=0.1, rely=0.93)
        save_config_button = ttk.Button(example_modify_global_sign_in_information_area, text="保存全局签到信息", command=lambda: thread_it(save_global_config, session, uid, address_combobox.get(), longitude_input.get(), latitude_input.get(), address_label, longitude_label, latitude_label, pictureid_label, [component[0], time_label], component, [save_config_button, return_button]))
        save_config_button.place(relx=0.2, rely=0.85, relheight=0.1)
        return_button = ttk.Button(example_modify_global_sign_in_information_area, text="返回", command=lambda: return_main_window(time_label, [example_modify_global_sign_in_information_area]))
        return_button.place(relx=0.7, rely=0.85, relheight=0.1)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def save_global_config(session, uid, address, longitude, latitude, address_label, longitude_label, latitude_label, pictureid_label, component1, component2, component3):
    try:
        if (longitude == '' and longitude != '') or (latitude != '' and latitude == ''):
            messagebox.showwarning("警告", "经度和纬度必须同时为空或同时不为空", parent=root)
            return
        if longitude != '' and latitude != '':
            try:
                longitude = float(longitude)
            except:
                messagebox.showwarning("警告", "经度格式只能为数字，请重新设置", parent=root)
                return
            if longitude < -180 or longitude > 180:
                messagebox.showwarning("警告", "经度范围只能为-180~180，请重新设置", parent=root)
                return
            try:
                latitude = float(latitude)
            except:
                messagebox.showwarning("警告", "纬度格式只能为数字，请重新设置", parent=root)
                return
            if latitude < -90 or latitude > 90:
                messagebox.showwarning("警告", "纬度范围只能为-90~90，请重新设置", parent=root)
                return
        for c in component3:
            c.configure(state="disabled")
        is_find = 0
        for d in range(len(program_config)):
            user_config = json.loads(decrypt(program_config[d]["user_config"], decrypt(program_config[d]["password"], password_key)))
            if uid == user_config["cx_login_config"]["uid"]:
                is_find = 1
                if user_config["cx_sign_config"]["pictureid"] != picturesid:
                    if picturesid != "":
                        pictureid = upload(session, uid, picturesid)
                        if not pictureid:
                            if not messagebox.askyesno("提示", "由于拍照图片上传失败，因此无法修改全局拍照图片信息，是否继续修改全局位置信息？", parent=root):
                                for c in component3:
                                    c.configure(state="normal")
                                return
                        else:
                            user_config["cx_sign_config"]["pictureid"] = pictureid
                    else:
                        user_config["cx_sign_config"]["pictureid"] = ""
                user_config["cx_sign_config"]["address"] = address
                user_config["cx_sign_config"]["latitude"] = latitude
                user_config["cx_sign_config"]["longitude"] = longitude
                encrypt_user_config = encrypt(json.dumps(user_config), decrypt(program_config[d]["password"], password_key))
                program_config[d]["user_config"] = encrypt_user_config
                if user_config["cx_sign_config"]["address"] == "":
                    address = "未设置"
                    address_style = "Blue.TLabel"
                else:
                    address = user_config["cx_sign_config"]["address"]
                    address_style = "Green.TLabel"
                if user_config["cx_sign_config"]["longitude"] == "":
                    longitude = "未设置"
                    longitude_style = "Blue.TLabel"
                else:
                    longitude = user_config["cx_sign_config"]["longitude"]
                    longitude_style = "Green.TLabel"
                if user_config["cx_sign_config"]["latitude"] == "":
                    latitude = "未设置"
                    latitude_style = "Blue.TLabel"
                else:
                    latitude = user_config["cx_sign_config"]["latitude"]
                    latitude_style = "Green.TLabel"
                if user_config["cx_sign_config"]["pictureid"] == "":
                    picture_id = "未设置"
                    pictureid_style = "Blue.TLabel"
                else:
                    picture_id = "已设置"
                    pictureid_style = "Green.TLabel"
                address_label.configure(text="全局位置信息：" + address, style=address_style)
                longitude_label.configure(text="全局经度信息：" + str(longitude), style=longitude_style)
                latitude_label.configure(text="全局纬度信息：" + str(latitude), style=latitude_style)
                pictureid_label.configure(text="全局拍照图片：" + picture_id, style=pictureid_style)
                break
        if is_find == 0:
            messagebox.showwarning("保存失败", "用户配置保存失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
            component1[0].after_cancel(timer_id)
            component1[1].after_cancel(temp_timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            login_window(0, component2)
            return
        with open(realpath + "\\" + program_config_file, "w") as file:
            file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
        messagebox.showinfo("保存成功", "用户配置保存成功", parent=root)
        for c in component3:
            c.configure(state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def upload(session, uid, file):
    try:
        if type(file) is str:
            try:
                files = {"file": ("photo.jpg", open(file, "rb"))}
            except FileNotFoundError:
                messagebox.showerror("错误", "拍照图片路径不存在，无法上传，请重试！", parent=root)
                return False
        else:
            buffered = BytesIO()
            file.save(buffered, format="PNG")
            image_bytes = buffered.getvalue()
            files = {"file": ("photo.png", image_bytes)}
        while True:
            try:
                tokenres = session.get("https://pan-yz.chaoxing.com/api/token/uservalid", headers=browser_headers)
                tokendict = json.loads(tokenres.text)
                break
            except:
                continue
        token = tokendict["_token"]
        try:
            uploadres = session.post("https://pan-yz.chaoxing.com/upload?_token=" + str(token), data={"puid": uid}, files=files, headers=browser_headers)
            resdict = json.loads(uploadres.text)
        except:
            messagebox.showerror("错误", "由于网络连接异常，拍照图片上传失败", parent=root)
            return False
        if resdict["result"]:
            return resdict["objectId"]
        else:
            messagebox.showerror("错误", "图片上传失败，页面提示“" + resdict["msg"]+"”", parent=root)
            return False
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def clear_picture(label):
    global picturesid
    try:
        if messagebox.askyesno("提示", "确定要清除拍照图片吗？", parent=root):
            tips_and_photo_label.configure(text="未设置拍照图片", image='')
            tips_and_photo_label.image = ''
            picturesid = ""
            label.configure(text="拍照图片清除成功，要使配置生效，请保存签到信息", style="Green.TLabel")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_shear_plate_picture(label):
    global picturesid
    try:
        label.configure(text="")
        im = ImageGrab.grabclipboard()
        if isinstance(im, Image.Image):
            try:
                picturesid = im
                w = im.width
                h = im.height
                if float(w) / float(h) > 500 / 220:
                    y = int((500 / float(w)) * float(h))
                    im_background = im.resize((500, y))
                else:
                    x = int((220 / float(h)) * float(w))
                    im_background = im.resize((x, 220))
                render = ImageTk.PhotoImage(im_background)
                tips_and_photo_label.configure(text='', image=render)
                tips_and_photo_label.image = render
                label.configure(text="图片加载成功", style="Green.TLabel")
            except:
                label.configure(text="图片加载失败，请重试", style="Red.TLabel")
        elif im:
            for filename in im:
                file_type = filetype.guess(filename)
                if file_type is None:
                    label.configure(text="剪切板中未检测到图片", style="Red.TLabel")
                    return
                elif file_type.extension != "jpg" and file_type.extension != "png" and file_type.extension != "gif" and file_type.extension != "webp" and file_type.extension != "bmp":
                    label.configure(text="剪切板中未检测到图片", style="Red.TLabel")
                    return
                try:
                    picturesid = filename
                    photo = Image.open(filename)
                    w = photo.width
                    h = photo.height
                    if float(w) / float(h) > 500 / 220:
                        y = int((500 / float(w)) * float(h))
                        im_background = photo.resize((500, y))
                    else:
                        x = int((220 / float(h)) * float(w))
                        im_background = photo.resize((x, 220))
                    render = ImageTk.PhotoImage(im_background)
                    tips_and_photo_label.configure(text='', image=render)
                    tips_and_photo_label.image = render
                    label.configure(text="图片加载成功", style="Green.TLabel")
                except:
                    label.configure(text="图片加载失败，请重试", style="Red.TLabel")
        else:
            label.configure(text="剪切板中未检测到图片", style="Red.TLabel")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def choose_file(label):
    global picturesid, tips_and_photo_label
    try:
        label.configure(text="")
        filepath = filedialog.askopenfilename(title="选择拍照图片", filetypes=(("图片文件", "*.jpg;*.png;*.gif;*.webp;*.bmp"),), parent=root)
        if filepath != "":
            file_type = filetype.guess(filepath)
            if file_type is None:
                label.configure(text="您选择的文件不是图片文件，请重新选择", style="Red.TLabel")
                return
            elif file_type.extension != "jpg" and file_type.extension != "png" and file_type.extension != "gif" and file_type.extension != "webp" and file_type.extension != "bmp":
                label.configure(text="您选择的文件不是图片文件，请重新选择", style="Red.TLabel")
                return
        else:
            return
        try:
            picturesid = filepath
            photo = Image.open(filepath)
            w = photo.width
            h = photo.height
            if float(w) / float(h) > 500 / 220:
                y = int((500 / float(w)) * float(h))
                im_background = photo.resize((500, y))
            else:
                x = int((220 / float(h)) * float(w))
                im_background = photo.resize((x, 220))
            render = ImageTk.PhotoImage(im_background)
            tips_and_photo_label.configure(text='', image=render)
            tips_and_photo_label.image = render
        except:
            tips_and_photo_label.configure(text="加载图片时出现问题，无法显示预览", image='')
            tips_and_photo_label.image = ''
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def load_chaoxingyunpan_picture(session, _id, area):
    global tips_and_photo_label
    try:
        tips_and_photo_label = ttk.Label(area, font=tkFont.Font(size=15, family="黑体"))
        tips_and_photo_label.pack()
        if _id != "未设置" and _id != "":
            tips_and_photo_label.configure(text="加载中……")
            try:
                res = session.get("https://p.ananas.chaoxing.com/star3/origin/" + _id + ".jpg", headers=browser_headers)
            except:
                tips_and_photo_label.configure(text="网络连接异常，无法显示预览", image='')
                tips_and_photo_label.image = ""
                return
            photo = Image.open(BytesIO(res.content))
            w = photo.width
            h = photo.height
            if float(w) / float(h) > 500 / 220:
                y = int((500 / float(w)) * float(h))
                im_background = photo.resize((500, y))
            else:
                x = int((220 / float(h)) * float(w))
                im_background = photo.resize((x, 220))
            render = ImageTk.PhotoImage(im_background)
            tips_and_photo_label.configure(text='', image=render)
            tips_and_photo_label.image = render
        else:
            tips_and_photo_label.configure(text="未设置拍照图片", image='')
            tips_and_photo_label.image = ''
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def empty_longitude(_input):
    try:
        _input.delete(0, tk.END)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_longitude_and_latitude(combobox, longitude_input, latitude_input):
    try:
        if is_query:
            for i in range(len(place_list["results"])):
                if place_list["results"][i]["address"] + place_list["results"][i]["name"] == combobox.get():
                    lat = place_list["results"][i]["location"]["lat"]  # 纬度
                    lng = place_list["results"][i]["location"]["lng"]  # 经度
                    longitude_input.delete(0, tk.END)
                    longitude_input.insert(0, lng)
                    latitude_input.delete(0, tk.END)
                    latitude_input.insert(0, lat)
                    break
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def query_longitude_and_latitude(_input, combobox, label, longitude_input, latitude_input):
    global is_query, place_list
    try:
        if _input == "":
            label.configure(text="请输入要查询的地点名", style="Red.TLabel")
            return
        label.configure(text="获取中，请稍候……", style="Blue.TLabel")
        try:
            res = requests.get("https://api.map.baidu.com/place/v2/search?query=" + _input + "&region=中国&output=json&ak=n9ubyGbqBXtgaLIuBaH2tQcMO63koM55")
            json_data = json.loads(res.text)
        except:
            label.configure(text="获取失败，请重试或通过在线查询方式进行查询", style="Red.TLabel")
            return
        if json_data["status"] == 0 and json_data["result_type"] == "poi_type":
            if not json_data["results"]:
                label.configure(text="您输入的地点名未能解析到任何结果！", style="Red.TLabel")
                return
            is_query = True
            place_list = json_data
            temp_address = []
            for info in json_data["results"]:
                temp_address.append(info["address"] + info["name"])
            combobox["values"] = temp_address
            combobox.set(temp_address[0])
            lat = json_data["results"][0]["location"]["lat"]  # 纬度
            lng = json_data["results"][0]["location"]["lng"]  # 经度
            longitude_input.delete(0, tk.END)
            longitude_input.insert(0, lng)
            latitude_input.delete(0, tk.END)
            latitude_input.insert(0, lat)
            label.configure(text="获取成功", style="Green.TLabel")
        elif json_data["result_type"] == "city_type":
            city = json_data["results"][0]["name"]
            try:
                res = requests.get("https://api.map.baidu.com/place/v2/search?query=" + _input + "&region=" + city + "&output=json&ak=n9ubyGbqBXtgaLIuBaH2tQcMO63koM55")
                json_data = json.loads(res.text)
            except:
                label.configure(text="获取失败，请重试或通过第三方网站查询", style="Red.TLabel")
                return
            if json_data["status"] == 0 and json_data["result_type"] == "poi_type":
                if not json_data["results"]:
                    label.configure(text="您输入的地点名未能解析到任何结果", style="Red.TLabel")
                    return
                is_query = True
                place_list = json_data
                temp_address = []
                for info in json_data["results"]:
                    temp_address.append(info["address"] + info["name"])
                combobox["values"] = temp_address
                combobox.set(temp_address[0])
                lat = json_data["results"][0]["location"]["lat"]  # 纬度
                lng = json_data["results"][0]["location"]["lng"]  # 经度
                longitude_input.delete(0, tk.END)
                longitude_input.insert(0, lng)
                latitude_input.delete(0, tk.END)
                latitude_input.insert(0, lat)
                label.configure(text="获取成功", style="Green.TLabel")
            else:
                label.configure(text="获取失败，请重试或通过第三方网站查询", style="Red.TLabel")
        else:
            label.configure(text="获取失败，请重试或通过第三方网站查询", style="Red.TLabel")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_checkbutton(n, component):
    try:
        if n:
            for c in component:
                c.configure(state="readonly")
        else:
            for c in component:
                c.configure(state="disabled")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_course_list(session, label, labelframe, button, time_label, component):
    global customize_course_list, course_listbox, select_all_items_button, deselect_all_items_button
    try:
        course_list = get_the_course_list(session, [component[0], time_label], component)
        if type(course_list) is list:
            customize_course_list = course_list
            label.destroy()
            try:
                s1 = ttk.Scrollbar(labelframe, orient="horizontal")
                s1.place(rely=0.93, relwidth=1)
                s2 = ttk.Scrollbar(labelframe)
                s2.place(relx=0.96, relheight=0.93)
                course_listbox = tk.Listbox(labelframe, selectmode=tk.MULTIPLE, xscrollcommand=s1.set, yscrollcommand=s2.set, exportselection=False)
                s1.config(command=course_listbox.xview)
                s2.config(command=course_listbox.yview)
                course_listbox.place(relwidth=0.96, relheight=0.93)
                course_listbox.delete(0, tk.END)
                course_listbox.bind("<<ListboxSelect>>", lambda event: choose_course(button, course_listbox))
                for item in course_list:
                    course_listbox.insert(tk.END, "["+item["teacher"]+"]-"+item["name"])
                select_all_items_button = ttk.Button(labelframe, text="全选", command=lambda: select_or_deselect_all_items(course_listbox, True, button))
                select_all_items_button.place(rely=0.95, relwidth=0.5, relheight=0.05)
                deselect_all_items_button = ttk.Button(labelframe, text="全不选", command=lambda: select_or_deselect_all_items(course_listbox, False, button))
                deselect_all_items_button.place(relx=0.5, rely=0.95, relwidth=0.5, relheight=0.05)
            except:
                pass
        else:
            label.configure(text="课程列表获取失败，请重试")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def example_modify_customize_sign_in_information(session, name, component):
    global is_query, picturesid, is_select
    try:
        is_query = False
        is_select = False
        mainmenu.entryconfigure(1, state="disabled")
        root.geometry("1500x750")
        example_modify_customize_sign_in_information_area = ttk.Frame(root)
        example_modify_customize_sign_in_information_area.place(relwidth=1, relheight=1)
        time_label = ttk.Label(example_modify_customize_sign_in_information_area, text="当前系统时间：" + time.strftime("%Y-%m-%d %H:%M:%S"), style="Blue.TLabel", font=tkFont.Font(size=10))
        time_label.pack()
        show_system_time(time_label, 2)
        welcome_label = ttk.Label(example_modify_customize_sign_in_information_area, text="欢迎" + name + "同学", font=tkFont.Font(size=15, family="黑体"))
        welcome_label.pack()
        course_listbox_area = ttk.Labelframe(example_modify_customize_sign_in_information_area, text="请选择一个或多个要签到的课程")
        tips_label = ttk.Label(course_listbox_area, text="正在获取课程列表……")
        tips_label.pack()
        component.append(example_modify_customize_sign_in_information_area)
        course_listbox_area.place(relwidth=0.3, relheight=1)
        other_area = ttk.Label(example_modify_customize_sign_in_information_area)
        tip_label = ttk.Label(other_area, text="请在左侧选择一个课程以修改自定义信息", font=tkFont.Font(size=15, family="黑体"))
        tip_label.place(relx=0.325, rely=0.45)
        other_area.place(relx=0.3, rely=0.1, relwidth=0.7, relheight=0.9)
        save_config_button = ttk.Button(other_area, text="保存当前所选课程的自定义签到信息", state="disabled")
        save_config_button.place(relx=0.2, rely=0.85, relwidth=0.2, relheight=0.1)
        return_button = ttk.Button(other_area, text="返回", command=lambda: return_main_window(time_label, [example_modify_customize_sign_in_information_area]))
        thread_it(get_course_to_customize_config, session, time_label, tips_label, course_listbox_area, other_area, tip_label, save_config_button, return_button, component)
        return_button.place(relx=0.6, rely=0.85, relwidth=0.2, relheight=0.1)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_course_to_customize_config(session, time_label, tips_label, course_listbox_area, other_area, tip_label, save_config_button, return_button, component):
    global course_listbox, select_all_items_button, deselect_all_items_button, is_load
    try:
        course_list = get_the_course_list(session, [component[0], time_label], component)
        if type(course_list) is list:
            tips_label.destroy()
            s1 = ttk.Scrollbar(course_listbox_area, orient="horizontal")
            s1.place(rely=0.93, relwidth=1)
            s2 = ttk.Scrollbar(course_listbox_area)
            s2.place(relx=0.96, relheight=0.93)
            course_listbox = tk.Listbox(course_listbox_area, selectmode=tk.BROWSE, xscrollcommand=s1.set, yscrollcommand=s2.set, exportselection=False)
            s1.config(command=course_listbox.xview)
            s2.config(command=course_listbox.yview)
            course_listbox.place(relwidth=0.96, relheight=0.93)
            course_listbox.delete(0, tk.END)
            is_load = False
            course_listbox.bind("<<ListboxSelect>>", lambda event: change_other_area(session, other_area, tip_label, save_config_button, return_button, course_listbox, course_list, [component[0], time_label], component))
            for item in course_list:
                course_listbox.insert(tk.END, "["+item["teacher"]+"]-"+item["name"])
        else:
            tips_label.configure(text="课程列表获取失败，请重试")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_other_area(session, area, label, save_config_button, return_button, listbox, course_list, component1, component2):
    global is_select, top_area, bottom_area, picturesid, is_load
    try:
        if listbox.curselection() != ():
            is_find = 0
            for i in range(len(program_config)):
                if program_user == decrypt(program_config[i]["username"], username_key):
                    is_find = 1
                    user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                    break
            if is_find == 0:
                messagebox.showwarning("加载失败", "用户配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
                component1[0].after_cancel(timer_id)
                component1[1].after_cancel(temp_timer_id)
                root.geometry("1000x300")
                mainmenu.delete(1)
                login_window(0, component2)
                return
            is_find = 0
            for d in range(len(user_config["advance_config"])):
                if str(user_config["advance_config"][d]["courseid"]) == str(course_list[listbox.curselection()[0]]["courseid"]) and str(user_config["advance_config"][d]["classid"]) == str(course_list[listbox.curselection()[0]]["classid"]):
                    is_find = 1
                    address = user_config["advance_config"][d]["data"]["address"]
                    longitude = user_config["advance_config"][d]["data"]["longitude"]
                    latitude = user_config["advance_config"][d]["data"]["latitude"]
                    pictureid = user_config["advance_config"][d]["data"]["pictureid"]
                    picturesid = pictureid
                    num = d
                    break
            if is_find == 0:
                messagebox.showwarning("加载失败", "用户配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
                component1[0].after_cancel(timer_id)
                component1[1].after_cancel(temp_timer_id)
                root.geometry("1000x300")
                mainmenu.delete(1)
                login_window(0, component2)
                return
            is_select = True
            label.destroy()
            top_area = ttk.Labelframe(area, text="所选课程自定义位置信息修改")
            top_area.place(relwidth=1, relheight=0.4)
            top_left_area = ttk.Label(top_area)
            top_left_area.place(relwidth=0.5, relheight=1)
            ttk.Label(top_left_area, text="各大地图经纬度在线查询（注：相同地点的经纬度在三个地图中略有不同）").place(relx=0.1)
            button1 = ttk.Button(top_left_area, text="百度地图", command=lambda: webbrowser.open("https://api.map.baidu.com/lbsapi/getpoint/index.html"))
            button1.place(relx=0.1, rely=0.2, relheight=0.2)
            button2 = ttk.Button(top_left_area, text="高德地图", command=lambda: webbrowser.open("https://lbs.amap.com/tools/picker"))
            button2.place(relx=0.4, rely=0.2, relheight=0.2)
            button3 = ttk.Button(top_left_area, text="腾讯地图", command=lambda: webbrowser.open("https://lbs.qq.com/getPoint/"))
            button3.place(relx=0.7, rely=0.2, relheight=0.2)
            ttk.Label(top_left_area, text="输入地点名，一键获取位置信息（百度地图接口，仅支持国内地址解析）").place(relx=0.1, rely=0.6)
            place_name_input = ttk.Entry(top_left_area)
            place_name_input.place(relx=0.1, rely=0.7, relwidth=0.6)
            place_name_query_button = ttk.Button(top_left_area, text="立即获取", command=lambda: thread_it(query_longitude_and_latitude, place_name_input.get(), address_combobox, tips_label, longitude_input, latitude_input))
            place_name_query_button.place(relx=0.7, rely=0.69)
            tips_label = ttk.Label(top_left_area)
            tips_label.place(relx=0.1, rely=0.8)
            top_right_area = ttk.Label(top_area)
            top_right_area.place(relx=0.5, relwidth=0.5, relheight=1)
            ttk.Label(top_right_area, text="输入或选择新的位置信息：").place(relx=0.1)
            address_combobox = ttk.Combobox(top_right_area)
            address_combobox["values"] = address
            address_combobox.set(address)
            address_combobox.bind("<<ComboboxSelected>>", lambda event: change_longitude_and_latitude(address_combobox, longitude_input, latitude_input))
            address_combobox.place(relx=0.1, rely=0.1, relwidth=0.8)
            ttk.Label(top_right_area, text="输入新的经度信息（范围-180~180，-180~0为西经，0~180为东经）").place(relx=0.1, rely=0.25)
            ttk.Label(top_right_area, text="若要清除经度信息请留空").place(relx=0.1, rely=0.35)
            longitude_input = ttk.Entry(top_right_area)
            longitude_input.delete(0, tk.END)
            longitude_input.insert(0, longitude)
            longitude_input.place(relx=0.1, rely=0.45, relwidth=0.65)
            empty_longitude_button = ttk.Button(top_right_area, text="一键清空", command=lambda: empty_longitude(longitude_input))
            empty_longitude_button.place(relx=0.75, rely=0.44)
            ttk.Label(top_right_area, text="输入新的纬度信息（范围-90~90，其中-90~0为南纬，0~90为北纬）").place(relx=0.1, rely=0.6)
            ttk.Label(top_right_area, text="若要清除纬度信息请留空").place(relx=0.1, rely=0.7)
            latitude_input = ttk.Entry(top_right_area)
            latitude_input.delete(0, tk.END)
            latitude_input.insert(0, latitude)
            latitude_input.place(relx=0.1, rely=0.8, relwidth=0.65)
            empty_latitude_button = ttk.Button(top_right_area, text="一键清空", command=lambda: empty_longitude(latitude_input))
            empty_latitude_button.place(relx=0.75, rely=0.79)
            bottom_area = ttk.Labelframe(area, text="所选课程自定义拍照图片修改")
            bottom_area.place(rely=0.4, relwidth=1, relheight=0.4)
            bottom_left_area = ttk.Label(bottom_area)
            bottom_left_area.place(relwidth=0.5, relheight=1)
            picture_preview_area = ttk.Labelframe(bottom_left_area, text="拍照图片预览")
            thread_it(load_chaoxingyunpan_picture, session, pictureid, picture_preview_area)
            picture_preview_area.place(relheight=1, relwidth=1)
            bottom_right_area = ttk.Label(bottom_area)
            bottom_right_area.place(relx=0.5, relwidth=0.5, relheight=1)
            is_load = True
            ttk.Label(bottom_right_area, text="修改拍照图片").place(relx=0.1, rely=0.3)
            from_file_button = ttk.Button(bottom_right_area, text="从文件中选择", command=lambda: choose_file(tips_from_change_label))
            from_file_button.place(relx=0.1, rely=0.4, relheight=0.2)
            from_shear_plate_button = ttk.Button(bottom_right_area, text="从剪切板中加载", command=lambda: check_shear_plate_picture(tips_from_change_label))
            from_shear_plate_button.place(relx=0.4, rely=0.4, relheight=0.2)
            clear_picture_button = ttk.Button(bottom_right_area, text="清除拍照图片", command=lambda: clear_picture(tips_from_change_label))
            clear_picture_button.place(relx=0.7, rely=0.4, relheight=0.2)
            tips_from_change_label = ttk.Label(bottom_right_area)
            tips_from_change_label.place(relx=0.1, rely=0.6)
            save_config_button.configure(state="normal", command=lambda: thread_it(change_customize_config, session, address_combobox.get(), longitude_input.get(), latitude_input.get(), num, component1, component2, [save_config_button, return_button]))
        else:
            if is_load:
                top_area.destroy()
                bottom_area.destroy()
            is_load = False
            tip_label = ttk.Label(area, text="请在左侧选择一个课程以修改自定义信息", font=tkFont.Font(size=15, family="黑体"))
            tip_label.place(relx=0.325, rely=0.45)
            save_config_button.configure(state="disabled")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_customize_config(session, address, longitude, latitude, t, component1, component2, component3):
    try:
        is_find = 0
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                is_find = 1
                user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                uid = user_config["cx_login_config"]["uid"]
                break
        if is_find == 0:
            messagebox.showwarning("加载失败", "用户配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
            component1[0].after_cancel(timer_id)
            component1[1].after_cancel(temp_timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            login_window(0, component2)
            return
        if (longitude == '' and longitude != '') or (latitude != '' and latitude == ''):
            messagebox.showwarning("警告", "经度和纬度必须同时为空或同时不为空", parent=root)
            return
        if longitude != '' and latitude != '':
            try:
                longitude = float(longitude)
            except:
                messagebox.showwarning("警告", "经度格式只能为数字，请重新设置", parent=root)
                return
            if longitude < -180 or longitude > 180:
                messagebox.showwarning("警告", "经度范围只能为-180~180，请重新设置", parent=root)
                return
            try:
                latitude = float(latitude)
            except:
                messagebox.showwarning("警告", "纬度格式只能为数字，请重新设置", parent=root)
                return
            if latitude < -90 or latitude > 90:
                messagebox.showwarning("警告", "纬度范围只能为-90~90，请重新设置", parent=root)
                return
        for c in component3:
            c.configure(state="disabled")
        is_find = 0
        for d in range(len(program_config)):
            user_config = json.loads(decrypt(program_config[d]["user_config"], decrypt(program_config[d]["password"], password_key)))
            if uid == user_config["cx_login_config"]["uid"]:
                is_find = 1
                if user_config["advance_config"][t]["data"]["pictureid"] != picturesid:
                    if picturesid != "":
                        pictureid = upload(session, uid, picturesid)
                        if not pictureid:
                            if not messagebox.askyesno("提示", "由于拍照图片上传失败，因此无法修改当前所选课程的自定义拍照图片信息，是否继续修改自定义位置信息？", parent=root):
                                for c in component3:
                                    c.configure(state="normal")
                                return
                        else:
                            user_config["advance_config"][t]["data"]["pictureid"] = pictureid
                    else:
                        user_config["advance_config"][t]["data"]["pictureid"] = ""
                user_config["advance_config"][t]["data"]["address"] = address
                user_config["advance_config"][t]["data"]["latitude"] = latitude
                user_config["advance_config"][t]["data"]["longitude"] = longitude
                encrypt_user_config = encrypt(json.dumps(user_config), decrypt(program_config[d]["password"], password_key))
                program_config[d]["user_config"] = encrypt_user_config
                break
        if is_find == 0:
            messagebox.showwarning("保存失败", "用户配置保存失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
            component1[0].after_cancel(timer_id)
            component1[1].after_cancel(temp_timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            login_window(0, component2)
            return
        with open(realpath + "\\" + program_config_file, "w") as file:
            file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
        messagebox.showinfo("保存成功", "用户配置保存成功", parent=root)
        for c in component3:
            c.configure(state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def select_or_deselect_all_items(listbox, n, button):
    try:
        if n:
            listbox.select_set(0, tk.END)
            if listbox.curselection() != ():
                button.configure(state="normal")
        else:
            listbox.selection_clear(0, tk.END)
            button.configure(state="disabled")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def choose_course(button, listbox):
    try:
        if listbox.curselection() != ():
            button.configure(state="normal")
        else:
            button.configure(state="disabled")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def start_sign(n, course_list, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num=False, is_all_sign=True):
    global sign_loop, sign_number
    try:
        for data in course_list:
            if num != sign_num:
                return
            courseid = data["courseid"]
            classid = data["classid"]
            cpi = data["cpi"]
            course_name = data["name"]
            label.configure(text="正在查询课程“"+course_name+"”的签到活动")
            if interface_num == 2:
                interface_two(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
            elif interface_num == 3:
                interface_three(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
            elif interface_num == 4:
                interface_four(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
        n += 1
        sign_number = n
        if num != sign_num:
            return
        if number_of_detected_sign_in == 0:
            if is_all_sign:
                label.configure(text="签到监控已启动，暂未查询到签到活动，已检查全部课程签到活动"+str(n)+"次")
            else:
                label.configure(text="签到监控已启动，暂未查询到签到活动，已检查所选课程签到活动" + str(n) + "次")
        else:
            if is_all_sign:
                label.configure(text="签到监控已启动，已查询到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动，已检查全部课程签到活动"+str(n)+"次")
            else:
                label.configure(text="签到监控已启动，已查询到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动，已检查所选课程签到活动" + str(n) + "次")
        sign_loop = root.after(int(frequency*1000), lambda: thread_it(start_sign, n, course_list, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def interface_four(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign):
    global interface_num, sign_error_num, sign_num, number_of_detected_sign_in
    try:
        if interface_num == 4:
            url = "https://mobilelearn.chaoxing.com/v2/apis/signStat/getSignActiveListByClassId?DB_STRATEGY=COURSEID&STRATEGY_PARA=courseId&courseId="+str(courseid)+"&classId="+str(classid)+"&page=1&pageSize=9999&orderType=0&duid=&denc="
            while True:
                try:
                    res = session.get(url, headers=browser_headers, timeout=10)
                    res = json.loads(res.text)
                    break
                except:
                    continue
            if res["result"]:
                for data in res['data']['list']:
                    if data['status'] == 1:
                        aid = data['active_id']
                        if str(aid) not in signed_in_list:
                            show_message(text, "课程“" + course_name + "”查询到签到活动，签到活动名称为“" + data['name'] + "”")
                            sign_in(num, session, text, label, courseid, classid, aid, course_name, data['name'], uid, name, address, latitude, longitude, pictureid, advance_config, 4, set_sign_num, button, time_label, component1, component2, is_all_sign)
            else:
                if num != sign_num:
                    return
                if sign_error_num < 3:
                    show_message(text, "在使用接口4查询课程" + course_name + "的签到活动时页面提示“" + res["errorMsg"] + "”，系统将尝试使用接口2进行签到监控")
                    interface_num = 2
                    sign_error_num += 1
                    interface_two(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
                else:
                    show_message(text, "在使用接口4查询课程" + course_name + "的签到活动时页面提示“" + res["errorMsg"] + "”，接口2-4均被封禁，请尝试使用接口1进行签到监控或等待一小时后再尝试使用接口2-4进行签到监控")
                    sign_error_num = 1
                    if is_all_sign:
                        thread_it(stop_sign_up_for_all_classes, 0, interface_num, session, label, text, button, time_label, component1, component2)
                    else:
                        thread_it(stop_sign_up_for_customize_classes, 0, interface_num, session, label, text, button, time_label, component1, component2)
        elif interface_num == 2:
            interface_two(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
        elif interface_num == 3:
            interface_three(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def interface_three(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign):
    global st, sign_error_num, interface_num, sign_num, number_of_detected_sign_in
    try:
        if interface_num == 3:
            url = "https://mobilelearn.chaoxing.com/v2/apis/active/student/activelist?fid=" + str(schoolid) + "&courseId=" + str(courseid) + "&classId=" + str(classid)+"&showNotStartedActive=0&_="+str(int(time.time()*1000))
            while True:
                try:
                    res = session.get(url, headers=browser_headers, timeout=10)
                    res = json.loads(res.text)
                    break
                except:
                    continue
            if res["result"]:
                sign_error_num = 1
                for data in res["data"]["activeList"]:
                    if data["activeType"] == 2 and data["status"] == 1:
                        aid = data["id"]
                        if str(aid) not in signed_in_list:
                            if num != sign_num:
                                return
                            number_of_detected_sign_in += 1
                            show_message(text, "课程“" + course_name + "”查询到签到活动，签到活动名称为“"+data["nameOne"]+"”")
                            sign_in(num, session, text, label, courseid, classid, aid, course_name, data["nameOne"], uid, name, address, latitude, longitude, pictureid, advance_config, 3, set_sign_num, button, time_label, component1, component2, is_all_sign)
            else:
                if num != sign_num:
                    return
                if sign_error_num < 3:
                    show_message(text, "在使用接口3查询课程" + course_name + "的签到活动时页面提示“" + res["errorMsg"] + "”，系统将尝试使用接口4进行签到监控")
                    interface_num = 4
                    sign_error_num += 1
                    interface_four(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
                else:
                    show_message(text, "在使用接口3查询课程" + course_name + "的签到活动时页面提示“" + res["errorMsg"] + "”，接口2-4均被封禁，请尝试使用接口1进行签到监控或等待一小时后再尝试使用接口2-4进行签到监控")
                    sign_error_num = 1
                    if is_all_sign:
                        thread_it(stop_sign_up_for_all_classes, 0, interface_num, session, label, text, button, time_label, component1, component2)
                    else:
                        thread_it(stop_sign_up_for_customize_classes, 0, interface_num, session, label, text, button, time_label, component1, component2)
        elif interface_num == 2:
            interface_two(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
        elif interface_num == 4:
            interface_four(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def interface_two(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign):
    global sign_error_num, interface_num, sign_num, number_of_detected_sign_in
    try:
        if interface_num == 2:
            url = "https://mobilelearn.chaoxing.com/ppt/activeAPI/taskactivelist?courseId=" + str(courseid) + "&classId=" + str(classid) + "&uid=" + str(uid) + "&cpi=" + str(cpi)
            while True:
                try:
                    r = session.get(url, headers=app_headers, timeout=10)
                    res = json.loads(r.text)
                    break
                except:
                    continue
            if res["result"]:
                sign_error_num = 1
                for i in range(len(res["activeList"])):
                    if res["activeList"][i]["activeType"] == 2 and res["activeList"][i]["status"] == 1:
                        aid = res["activeList"][i]["id"]
                        if str(aid) not in signed_in_list:
                            if num != sign_num:
                                return
                            number_of_detected_sign_in += 1
                            show_message(text, "课程“" + course_name + "”查询到签到活动，签到活动名称为“" + res["activeList"][i]["nameOne"]+"”")
                            sign_in(num, session, text, label, courseid, classid, aid, course_name, res["activeList"][i]["nameOne"], uid, name, address, latitude, longitude, pictureid, advance_config, 2, set_sign_num, button, time_label, component1, component2, is_all_sign)
            else:
                if num != sign_num:
                    return
                if sign_error_num < 3:
                    show_message(text, "在使用接口2查询课程" + course_name + "的签到活动时页面提示“" + res["errorMsg"] + "”，系统将尝试使用接口3进行签到监控")
                    interface_num = 3
                    sign_error_num += 1
                    interface_three(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
                else:
                    show_message(text, "在使用接口2查询课程" + course_name + "的签到活动时页面提示“" + res["errorMsg"] + "”，接口2-4均被封禁，请尝试使用接口1进行签到监控或等待一小时后再尝试使用接口2-4进行签到监控")
                    sign_error_num = 1
                    if is_all_sign:
                        thread_it(stop_sign_up_for_all_classes, 0, interface_num, session, label, text, button, time_label, component1, component2)
                    else:
                        thread_it(stop_sign_up_for_customize_classes, 0, interface_num, session, label, text, button, time_label, component1, component2)
        elif interface_num == 3:
            interface_three(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
        elif interface_num == 4:
            interface_four(courseid, classid, cpi, course_name, num, session, text, label, frequency, uid, name, schoolid, address, latitude, longitude, pictureid, advance_config, course_parameters, button, time_label, component1, component2, set_sign_num, is_all_sign)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def stop_sign_up_for_all_classes(n, num, session, label, text, button, time_label, component1, component2):
    global sign_num, qrcode_sign_list, is_reconnect, is_connect
    try:
        sign_num += 1
        if check_qrcode_sign_window_list != {}:
            for ch in check_qrcode_sign_window_list.keys():
                check_qrcode_sign_window_list[ch].destroy()
        if len(qrcode_sign_list) > 0:
            root.after_cancel(qrcode_sign_ws_heartbeat_after_id)
            qrcode_sign_ws.close()
        qrcode_sign_list = []
        if num == 1:
            button.configure(state="disabled")
            if is_reconnect:
                root.after_cancel(ws_connect_after_id)
                ws.close()
                is_reconnect = 0
            if is_connect:
                root.after_cancel(ws_heartbeat_after_id)
                ws.close()
                is_connect = 0
        label.configure(text="签到监控未启动")
        button.configure(text="启动监控", command=lambda: thread_it(start_sign_up_for_all_classes, jiekou.get(), frequency_input.get(), session, label, text, button, time_label, component1, component2), state="normal")
        if n == 0:
            show_message(text, "签到监控已停止")
        elif n == 1:
            show_message(text, "websockets连接超时次数过多，签到监控已停止")
        for c in component1:
            c.configure(state="normal")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def connect(session, text, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num=False, is_all_sign=True, course_list=None):
    global ws, ws_get_connect_time, is_reconnect
    try:
        is_reconnect = 1
        n = sign_num
        ws = websocket.WebSocketApp("wss://im-api-vip6-v2.easemob.com/ws/032/xvrhfd2j/websocket", on_message=lambda _ws, message: thread_it(on_message, _ws, message, n, session, text, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list), on_open=lambda _ws: thread_it(on_open, _ws, text, session, label, button, time_label, component1, component2, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list))
        ws_get_connect_time = time.time()
        thread_it(check_ws_connect_time, ws, text, session, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
        ws.run_forever()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_ws_connect_time(_ws, text, session, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list):
    global ws_connect_after_id, is_reconnect, sign_num
    try:
        if time.time() > ws_get_connect_time+10:
            if num <= 3:
                show_message(text, "websockets连接超时，正在尝试第"+str(num)+"次重连")
                _ws.close()
                label.configure(text="websockets连接超时，正在重新连接……")
                thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, num+1, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
            else:
                if is_all_sign:
                    thread_it(stop_sign_up_for_all_classes, 1, 1, session, label, text, button, time_label, component1, component2)
                else:
                    thread_it(stop_sign_up_for_customize_classes, 3, 1, session, label, text, button, time_label, component1, component2)
        else:
            ws_connect_after_id = root.after(1000, lambda: thread_it(check_ws_connect_time, _ws, text, session, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def on_open(_ws, text, session, label, button, time_label, component1, component2, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list):
    global ws_get_heartbeat_message_time, is_reconnect, is_connect
    try:
        is_reconnect = 0
        root.after_cancel(ws_connect_after_id)
        ws_get_heartbeat_message_time = time.time()
        is_connect = 1
        check_ws_heartbeat_message_time(_ws, text, session, label, button, time_label, component1, component2, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_ws_heartbeat_message_time(_ws, text, session, label, button, time_label, component1, component2, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list):
    global ws_heartbeat_after_id, is_connect
    try:
        if time.time() > ws_get_heartbeat_message_time+60:
            is_connect = 0
            show_message(text, "超过60秒没有收到心跳包，重启websockets连接")
            _ws.close()
            label.configure(text="websockets连接断开，正在重新连接……")
            thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, 1, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
        else:
            ws_heartbeat_after_id = root.after(1000, lambda: check_ws_heartbeat_message_time(_ws, text, session, label, button, time_label, component1, component2, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def on_message(_ws, message, n, session, text, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list):
    global ws_get_heartbeat_message_time
    try:
        ws_get_heartbeat_message_time = time.time()
        if message == "o":
            thread_it(login, _ws, session, text, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
        elif message[0] == "a":
            mess = json.loads(message[1:])[0]
            mess = base64.b64decode(mess)
            print(mess)
            if len(mess) < 5:
                return
            if mess[:5] == b"\x08\x00\x40\x02\x4a":
                thread_it(get_taskinfo, mess)
            elif mess[:5] == b"\x08\x00\x40\x01\x4a":
                thread_it(first_get_taskinfo, mess)
            elif mess[:5] == b"\x08\x00@\x03J":
                show_message(text, "websockets连接成功")
                if number_of_detected_sign_in == 0:
                    label.configure(text="websockets连接成功，暂未收到签到活动")
                else:
                    label.configure(text="websockets连接成功，已收到"+str(number_of_detected_sign_in)+"个签到活动，程序成功完成"+str(successful_sign_in_number)+"个签到活动")
                _ws.send("[\"CABAAVgA\"]")
                print("发送1[\"CABAAVgA\"]")
            else:
                thread_it(get_message, n, session, mess, text, label, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, button, time_label, component1, component2, is_all_sign, course_list)
        elif message[0] == "c":
            print("连接断开")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def first_get_taskinfo(message):
    try:
        if GetChatId(message) is None:
            return
        chatid_list = re.findall(b"\\x12-\\n\)\\x12\\x0f(\d+)\\x1a\\x16conference.easemob.com\\x10", message)
        for _id in chatid_list:
            ws.send("[\"" + base64.b64encode(b"\x08\x00@\x00J+\x1a)\x12\x0f" + _id + b"\x1a\x16conference.easemob.comX\x00").decode("utf-8") + "\"]")
            print("发送2[\"" + base64.b64encode(b"\x08\x00@\x00J+\x1a)\x12\x0f" + _id + b"\x1a\x16conference.easemob.comX\x00").decode("utf-8") + "\"]")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def login(_ws, session, text, label, button, time_label, component1, component2, frequency, num, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list):
    global sign_num
    try:
        try:
            res = session.get("https://im.chaoxing.com/webim/me", headers=browser_headers, timeout=10)
        except:
            if num <= 3:
                show_message(text, "websockets连接失败，正在尝试第"+str(num)+"次重连")
                _ws.close()
                label.configure(text="websockets连接失败，正在重新连接……")
                thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, num+1, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
            else:
                if is_all_sign:
                    thread_it(stop_sign_up_for_all_classes, 1, 1, session, label, text, button, time_label, component1, component2)
                else:
                    thread_it(stop_sign_up_for_customize_classes, 3, 1, session, label, text, button, time_label, component1, component2)
            return
        regex = re.search("loginByToken\('(\d+?)', '([^']+?)'\);", res.text)
        if regex:
            uid = regex[1]
            imToken = regex[2]
        elif num <= 3:
            show_message(text, "websockets连接失败，正在尝试第"+str(num)+"次重连")
            _ws.close()
            label.configure(text="websockets连接失败，正在重新连接……")
            thread_it(connect, session, text, label, button, time_label, component1, component2, frequency, num+1, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, is_all_sign, course_list)
            return
        else:
            if is_all_sign:
                thread_it(stop_sign_up_for_all_classes, 1, 1, session, label, text, button, time_label, component1, component2)
            else:
                thread_it(stop_sign_up_for_customize_classes, 3, 1, session, label, text, button, time_label, component1, component2)
            return
        timestamp = str(int(time.time() * 1000))
        temp = b"\x08\x00\x12" + chr(52 + len(uid)).encode("utf-8") + b"\x0a\x0e" + "cx-dev#cxstudy".encode("utf-8") + b"\x12" + chr(len(uid)).encode("utf-8") + uid.encode("utf-8") + b"\x1a\x0b" + "easemob.com".encode("utf-8") + b"\x22\x13" + ("webim_"+timestamp).encode("utf-8") + b"\x1a\x85\x01" + "$t$".encode("utf-8") + imToken.encode("utf-8") + b"\x40\x03\x4a\xc0\x01\x08\x10\x12\x05\x33\x2e\x30\x2e\x30\x28\x00\x30\x00\x4a\x0d" + timestamp.encode("utf-8") + b"\x62\x05\x77\x65\x62\x69\x6d\x6a\x13\x77\x65\x62\x69\x6d\x5f" + timestamp.encode("utf-8") + b"\x72\x85\x01\x24\x74\x24" + imToken.encode("utf-8") + b"\x50\x00\x58\x00"
        data = "[\"" + base64.b64encode(temp).decode("utf-8") + "\"]"
        _ws.send(data)
        print("发送3"+data)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_taskinfo(message):
    try:
        if GetChatId(message) is None:
            return
        mess2 = message
        temp = ""
        for i in range(len(mess2)):
            if i == 3:
                temp += b"\x00".decode("utf-8")
            elif i == 6:
                temp += b"\x1a".decode("utf-8")
            else:
                temp += chr(mess2[i])
        mess2 = temp + bytearray([0x58, 0x00]).decode("utf-8")
        ws.send("[\"" + base64.b64encode(mess2.encode("utf-8")).decode("utf-8") + "\"]")
        print("发送4[\"" + base64.b64encode(mess2.encode("utf-8")).decode("utf-8") + "\"]")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def GetChatId(byte):
    try:
        index = bytes_last_index_of(byte, bytesend)
        if index == -1:
            return None
        i = byte[:index].rfind(bytes([0x12]))
        if i == -1:
            return None
        _len = byte[i + 1]
        return byte[i + 2: index].decode("utf-8") if i + 2 + _len == index else None
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def bytes_last_index_of(byte, value, start=0, end=0):
    try:
        length = len(value)
        len_bytes = len(byte)
        if length == 0 or len_bytes == 0:
            return -1
        last = value[-1]
        for i in range(len_bytes - 1 if end == 0 else end - 1, start - 1, -1):
            if byte[i] != last:
                continue
            is_return = True
            for j in range(length - 2, -1, -1):
                if byte[i - length + j + 1] == value[j]:
                    continue
                is_return = False
                break
            if is_return:
                return i - length + 1
        return -1
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_message(num, session, message, text, label, frequency, uid, name, address, latitude, longitude, pictureid, advance_config, set_sign_num, button, time_label, component1, component2, is_all_sign, course_list):
    global number_of_detected_sign_in
    try:
        chatid = GetChatId(message)
        if chatid is None:
            return
        sessonend = 11
        while True:
            index = sessonend
            if chr(message[index]) != b"\x22".decode("utf-8"):
                index += 1
                if chr(message[index]) != b"\x22".decode("utf-8"):
                    index += 1
                    break
                else:
                    index += 1
            else:
                index += 1
            sessonend = message[index]+(message[index+1]-1)*0x80+index+2
            index += 2
            if sessonend < 0 or chr(message[index]).encode("utf-8") != b"\x08":
                index += 1
                break
            else:
                index += 1
            ws.send("[\"" + base64.b64encode(BuildReleaseSession(chatid, message[index:index+9])).decode("utf-8") + "\"]")
            print("发送5[\"" + base64.b64encode(BuildReleaseSession(chatid, message[index:index+9])).decode("utf-8") + "\"]")
            index += 10
            att = GetAttachment(message, index, sessonend)
            if att is not None:
                if att["attachmentType"] == 15 and att["att_chat_course"]["aid"] != 0 and (att["att_chat_course"]["atype"] == 2 or att["att_chat_course"]["atype"] == 0) and att["att_chat_course"]["type"] == 1:
                    if str(att["att_chat_course"]["aid"]) not in signed_in_list:
                        if course_list is not None:
                            is_find = 0
                            for c in course_list:
                                if str(c["courseid"]) == str(att["att_chat_course"]["courseInfo"]["courseid"]) and str(c["classid"]) == str(att["att_chat_course"]["courseInfo"]["classid"]):
                                    is_find = 1
                                    break
                            if is_find == 0:
                                return
                        number_of_detected_sign_in += 1
                        show_message(text, "收到来自课程“"+att["att_chat_course"]["courseInfo"]["coursename"]+"”的签到活动，签到活动名称为“"+att["att_chat_course"]["title"]+"”")
                        label.configure(text="websockets连接成功，已收到"+str(number_of_detected_sign_in)+"个签到活动，程序成功完成"+str(successful_sign_in_number)+"个签到活动")
                        print(att["att_chat_course"]["aid"], att["att_chat_course"]["courseInfo"]["courseid"], att["att_chat_course"]["courseInfo"]["classid"])
                        input()
                        thread_it(sign_in, num, session, text, label, att["att_chat_course"]["courseInfo"]["courseid"], att["att_chat_course"]["courseInfo"]["classid"], att["att_chat_course"]["aid"], att["att_chat_course"]["courseInfo"]["coursename"], att["att_chat_course"]["title"], uid, name, address, latitude, longitude, pictureid, advance_config, 1, set_sign_num, button, time_label, component1, component2, is_all_sign, frequency)
            break
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def sign_in(num, session, text, label, course_id, class_id, aid, lesson_name, aname, uid, name, address, latitude, longitude, pictureid, advance_config, interface, set_sign_num, button, time_label, component1, component2, is_all_sign, frequency=None):
    global successful_sign_in_number
    try:
        if not is_all_sign and CheckVar6.get():
            _is_loop = 1
        else:
            _is_loop = 0
        while True:
            try:
                res = session.get("https://mobilelearn.chaoxing.com/newsign/signDetail?activePrimaryId="+str(aid)+"&type=1", headers=browser_headers)
                res = json.loads(res.text)
                break
            except:
                continue
        if num != sign_num:
            return
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                user_config["signed_in_list"].append(str(aid))
                signed_in_list.append(str(aid))
                program_config[i]["user_config"] = encrypt(json.dumps(user_config), decrypt(program_config[i]["password"], password_key))
                with open(realpath + "\\" + program_config_file, "w") as file:
                    file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                break
        if res["otherId"] == 2:
            r_c = json.loads(res["content"])
            if res["ifRefreshEwm"] == 1:
                if "ewmRefreshTime" in r_c.keys():
                    ref_time = str(r_c["ewmRefreshTime"])
                else:
                    ref_time = "10"
                if "ifopenAddress" in r_c.keys() and r_c["ifopenAddress"]:
                    location = json.dumps({"result": 1, "latitude": r_c["locationLatitude"], "longitude": r_c["locationLongitude"], "address": r_c["locationText"]})
                    show_message(text, "该签到为"+ref_time+"秒自动更新的二维码签到，且指定了签到地点为“"+r_c["locationText"]+"”")
                else:
                    location = ""
                    show_message(text, "该签到为" + ref_time + "秒自动更新的二维码签到，且未指定签到地点")
            else:
                if "ifopenAddress" in r_c.keys() and r_c["ifopenAddress"]:
                    location = json.dumps({"result": 1, "latitude": r_c["locationLatitude"], "longitude": r_c["locationLongitude"], "address": r_c["locationText"]})
                    show_message(text, "该签到为无自动更新的二维码签到，且指定了签到地点为“"+r_c["locationText"]+"”")
                else:
                    location = ""
                    show_message(text, "该签到为无自动更新的二维码签到，且未指定签到地点")
            code_sign_window = tk.Toplevel(root)
            code_sign_window.geometry("700x500")
            code_sign_window.title("二维码手动签到")
            code_sign_window.resizable(False, False)
            with open(realpath + "\\title_ico.ico", "wb+") as temp_3:
                temp_b64 = base64.b64decode(title_icon)
                temp_3.write(temp_b64)
            code_sign_window.iconbitmap(realpath + "\\title_ico.ico")
            code_sign_window.focus_force()
            code_text = ttk.Label(code_sign_window, text="程序检测到二维码签到，若您要使用程序进行签到请在列出的三种签到方法中选择一种进行签到\n1.请同学帮忙配合使用右侧的微信小程序扫描未过期的签到二维码进行签到\n2.将未过期的签到二维码发送至QQ群914995724配合群机器人进行解析并签到\n3.扫描签到二维码后自行在下方输入二维码内容手动签到", font=tkFont.Font(size=10), wraplength=600, justify="left")
            photo = Image.open(BytesIO(base64.b64decode(wechat_mini_program)))
            im_background = photo.resize((175, 175))
            render = ImageTk.PhotoImage(im_background)
            wechat_mini_program_label = ttk.Label(code_sign_window, image=render)
            wechat_mini_program_label.image = render
            wechat_mini_program_label.place(relx=0.75, rely=0.08)
            code_text.place(relx=0.05, rely=0.05)
            if len(lesson_name) > 25:
                lesson_names = lesson_name[:25]+"……"
            else:
                lesson_names = lesson_name
            lesson_text = ttk.Label(code_sign_window, text="当前二维码签到的课程名称："+lesson_names, wraplength=490, justify="left")
            lesson_text.place(relx=0.05, rely=0.2)
            if len(aname) > 25:
                anames = aname[:25]+"……"
            else:
                anames = aname
            active_text = ttk.Label(code_sign_window, text="当前二维码签到的活动名称："+anames, wraplength=490, justify="left")
            active_text.place(relx=0.05, rely=0.25)
            active_text = ttk.Label(code_sign_window, text="注意：由于学习通签到机制更新，自动更新的二维码参数将会跟随二维码自动变化，因此需要在自动更新时间内完成签到，无自动更新的二维码签到不受影响", wraplength=490, justify="left", style="Red.TLabel")
            active_text.place(relx=0.05, rely=0.3)
            active_text = ttk.Label(code_sign_window, text="程序已连接云端数据库，将在其它同学分享二维码信息后第一时间获取二维码参数并进行签到，您可以选择后台运行监控以隐藏该窗口", wraplength=490, justify="left", style="Blue.TLabel")
            active_text.place(relx=0.05, rely=0.4)
            select_qrcode_picture_button = ttk.Button(code_sign_window, text="选择本地二维码图片", command=lambda: select_the_local_qrcode_picture(code_sign_window, tips_label, code_input))
            select_qrcode_picture_button.place(relx=0.2, rely=0.5, relheight=0.1)
            detecting_shear_plate_button = ttk.Button(code_sign_window, text="识别剪切板二维码图片", command=lambda: detecting_shear_plate_qrcode_picture(tips_label, code_input))
            detecting_shear_plate_button.place(relx=0.6, rely=0.5, relheight=0.1)
            code_input = ttk.Entry(code_sign_window)
            code_input.place(relx=0.1, rely=0.65, relwidth=0.8)
            tips_label = ttk.Label(code_sign_window)
            tips_label.place(relx=0.1, rely=0.7)
            var = tk.BooleanVar(value=True)
            share_qrcode_button = ttk.Checkbutton(code_sign_window, text="签到成功后将二维码内容分享至云端", variable=var)
            share_qrcode_button.place(relx=0.6, rely=0.7)
            sign_button = ttk.Button(code_sign_window, text="立即手动签到", command=lambda: thread_it(sign_in_manually, session, label, tips_label, text, name, course_id, class_id, aid, uid, code_input.get(), interface, var.get(), [select_qrcode_picture_button, detecting_shear_plate_button, code_input, share_qrcode_button, sign_button, msign, exit_button, background_monitoring], set_sign_num, button, time_label, component1, component2, is_all_sign, location))
            sign_button.place(relx=0.1, rely=0.75, relheight=0.1)
            msign = ttk.Button(code_sign_window, text="查看手签教程", command=lambda: webbrowser.open("https://api.waadri.top/ChaoXing/MSIT.php"))
            msign.place(relx=0.3, rely=0.75, relheight=0.1)
            exit_button = ttk.Button(code_sign_window, text="我已自行签到", command=(lambda: to_sign_in(text, aid)))
            exit_button.place(relx=0.5, rely=0.75, relheight=0.1)
            background_monitoring = ttk.Button(code_sign_window, text="后台运行监控", command=(lambda: code_sign_window.destroy()))
            background_monitoring.place(relx=0.7, rely=0.75, relheight=0.1)
            code_input.bind("<Return>", lambda event: thread_it(sign_in_manually, session, label, tips_label, text, name, course_id, class_id, aid, uid, code_input.get(), interface, var.get(), [select_qrcode_picture_button, detecting_shear_plate_button, code_input, share_qrcode_button, sign_button, msign, exit_button, background_monitoring], set_sign_num, button, time_label, component1, component2, is_all_sign, location))
            code_sign_window.protocol("WM_DELETE_WINDOW", lambda: close_qrcode_window(aid))
            check_qrcode_sign_window_list["code_sign_window_" + str(aid)] = code_sign_window
            temp_data = {"session": session, "text": text, "label": label, "name": name, "courseid": course_id, "classid": class_id, "aid": str(aid), "uid": uid, "lesson_name": lesson_name, "interface": interface, "location": location}
            if len(qrcode_sign_list) == 0:
                qrcode_sign_list.append(temp_data)
                thread_it(qrcode_sign_ws_monitor, name, set_sign_num, button, time_label, component1, component2, is_all_sign)
            else:
                t = int(time.time())
                qrcode_sign_list.append(temp_data)
                temp_list = []
                for d in qrcode_sign_list:
                    temp_list.append(d["aid"])
                data = {"t": t, "device_id": encrypt("ChaoXing-sign-program_" + uuid_id + name, "4c6f" + str(t) + "9f2d", uuid_id[:16]), "uuid": uuid_id, "qrcode_sign_list": temp_list}
                data = encrypt(json.dumps(data), "d1a7e1f8-8d7b-4c6f", "9f2d9a7d7e1c8d7b")
                try:
                    qrcode_sign_ws.send(data)
                except:
                    pass
        else:
            is_find = 0
            url = "https://mobilelearn.chaoxing.com/pptSign/stuSignajax"
            if res["otherId"] == 0:
                if res["ifPhoto"] == 1:
                    if not is_all_sign and CheckVar6.get():
                        if CheckVar4.get():
                            if num != sign_num:
                                return
                            while True:
                                try:
                                    res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                    res1 = json.loads(res1.text)
                                    break
                                except:
                                    continue
                            student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                            show_message(text, "该签到为拍照签到，由于您使用了反钓鱼签到模式并设置了随机使用其他已签到同学的拍照图片进行签到，程序已启动班级签到情况监控，待已签人数多于未签人数后自动使用其他同学的拍照图片进行签到")
                            while True:
                                if anti_fishing_check_in_mode(student_count, num, session, aid):
                                    thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, "photo", aid, course_id, class_id, name, uid, interface, set_sign_num, button, time_label, component1, component2)
                                    return
                                else:
                                    time.sleep(2)
                                    continue
                        else:
                            if num != sign_num:
                                return
                            while True:
                                try:
                                    res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                    res1 = json.loads(res1.text)
                                    break
                                except:
                                    continue
                            student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                            show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                            while True:
                                if anti_fishing_check_in_mode(student_count, num, session, aid):
                                    show_message(text, "检测到课程“"+lesson_name+"”发布的名称为“"+aname+"”的签到已签人数已多于未签人数，开始进行签到")
                                    break
                                else:
                                    time.sleep(2)
                                    continue
                    elif not is_all_sign and CheckVar4.get():
                        thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, "photo", aid, course_id, class_id, name, uid, interface, set_sign_num, button, time_label, component1, component2)
                        show_message(text, "该签到为拍照签到，由于您设置了随机使用其他已签到同学的拍照图片进行签到，程序已启动对其他同学签到的监控，待其他同学签到后自动使用其他同学的拍照图片进行签到")
                        return
                    for data in advance_config:
                        if str(data["courseid"]) == str(course_id) and str(data["classid"]) == str(class_id):
                            is_find = 1
                            if data["data"]["pictureid"] == "":
                                if pictureid == "":
                                    show_message(text, "该签到为拍照签到，但您未设置拍照图片，将使用普通签到模式执行无图片签到")
                                    object_id = ""
                                else:
                                    show_message(text, "该签到为拍照签到，准备使用全局拍照图片进行签到")
                                    object_id = pictureid
                            else:
                                show_message(text, "该签到为拍照签到，准备使用当前课程设置的自定义拍照图片进行签到")
                                object_id = data["data"]["pictureid"]
                    if is_find == 0:
                        if pictureid == "":
                            show_message(text, "该签到为拍照签到，但您未设置拍照图片，将使用普通签到模式执行无图片签到")
                            object_id = ""
                        else:
                            show_message(text, "该签到为拍照签到，准备使用全局拍照图片进行签到")
                            object_id = pictureid
                    data = {
                        "name": name,
                        "activeId": aid,
                        "uid": uid,
                        "objectId": object_id
                    }
                else:
                    if not is_all_sign and CheckVar6.get():
                        if num != sign_num:
                            return
                        while True:
                            try:
                                res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                res1 = json.loads(res1.text)
                                break
                            except:
                                continue
                        student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                        show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                        while True:
                            if anti_fishing_check_in_mode(student_count, num, session, aid):
                                show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                                break
                            else:
                                time.sleep(2)
                                continue
                    show_message(text, "该签到为普通签到")
                    data = {
                        "name": name,
                        "activeId": aid,
                        "uid": uid,
                    }
            elif res["otherId"] == 3:
                if not is_all_sign and CheckVar6.get():
                    if num != sign_num:
                        return
                    while True:
                        try:
                            res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                            res1 = json.loads(res1.text)
                            break
                        except:
                            continue
                    student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                    show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                    while True:
                        if anti_fishing_check_in_mode(student_count, num, session, aid):
                            show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                            break
                        else:
                            time.sleep(2)
                            continue
                show_message(text, "该签到为手势签到，签到手势为“"+res["signCode"]+"”")
                data = {
                    "name": name,
                    "activeId": aid,
                    "uid": uid,
                }
            elif res["otherId"] == 4:
                if res["content"] == "":
                    if not is_all_sign and CheckVar6.get():
                        if CheckVar5.get():
                            if num != sign_num:
                                return
                            while True:
                                try:
                                    res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                    res1 = json.loads(res1.text)
                                    break
                                except:
                                    continue
                            student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                            show_message(text, "该签到为普通位置签到，由于您使用了反钓鱼签到模式并设置了随机使用其他已签到同学的位置信息进行签到，程序已启动班级签到情况监控，待已签人数多于未签人数后自动使用其他同学的位置信息进行签到")
                            while True:
                                if anti_fishing_check_in_mode(student_count, num, session, aid):
                                    thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, "location", aid, course_id, class_id, name, uid, interface, set_sign_num, button, time_label, component1, component2)
                                    return
                                else:
                                    time.sleep(2)
                                    continue
                        else:
                            if num != sign_num:
                                return
                            while True:
                                try:
                                    res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                    res1 = json.loads(res1.text)
                                    break
                                except:
                                    continue
                            student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                            show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                            while True:
                                if anti_fishing_check_in_mode(student_count, num, session, aid):
                                    show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                                    break
                                else:
                                    time.sleep(2)
                                    continue
                    elif not is_all_sign and CheckVar5.get():
                        thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, "location", aid, course_id, class_id, name, uid, interface, set_sign_num, button, time_label, component1, component2)
                        show_message(text, "该签到为普通位置签到，由于您设置了随机使用其他已签到同学的位置信息进行签到，程序已启动对其他同学签到的监控，待其他同学签到后自动使用其他同学的位置信息进行签到")
                        return
                    for date in advance_config:
                        if str(date["courseid"]) == str(course_id) and str(date["classid"]) == str(class_id):
                            is_find = 1
                            if date["data"]["longitude"] == "" or date["data"]["latitude"] == "" or date["data"]["address"] == "":
                                if address == "" and longitude == "" and latitude == "":
                                    show_message(text, "该签到为普通位置签到，但您未设置位置信息，将使用普通签到模式执行无位置信息签到")
                                    add = ""
                                    long = "-1"
                                    lat = "-1"
                                else:
                                    show_message(text, "该签到为普通位置签到，准备使用全局位置信息进行签到")
                                    add = address
                                    long = longitude
                                    lat = latitude
                            else:
                                show_message(text, "该签到为普通位置签到，准备使用当前课程设置的自定义位置信息进行签到")
                                add = date["data"]["address"]
                                long = date["data"]["longitude"]
                                lat = date["data"]["latitude"]
                            break
                    if is_find == 0:
                        if address == "" and longitude == "" and latitude == "":
                            show_message(text, "该签到为普通位置签到，但您未设置位置信息，将使用普通签到模式执行无位置信息签到")
                            add = ""
                            long = "-1"
                            lat = "-1"
                        else:
                            show_message(text, "该签到为普通位置签到，准备使用全局位置信息进行签到")
                            add = address
                            long = longitude
                            lat = latitude
                    data = {
                        "name": name,
                        "address": add,
                        "activeId": aid,
                        "uid": uid,
                        "longitude": long,
                        "latitude": lat,
                    }
                elif json.loads(res["content"])["ifopenAddress"] == 1:
                    if not is_all_sign and CheckVar6.get():
                        if num != sign_num:
                            return
                        while True:
                            try:
                                res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                res1 = json.loads(res1.text)
                                break
                            except:
                                continue
                        student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                        show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                        while True:
                            if anti_fishing_check_in_mode(student_count, num, session, aid):
                                show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                                break
                            else:
                                time.sleep(2)
                                continue
                    show_message(text, "该签到为指定签到地点的位置签到，指定签到地点为“" + json.loads(res["content"])["locationText"] + "”")
                    data = {
                        "name": name,
                        "address": json.loads(res["content"])["locationText"],
                        "activeId": aid,
                        "uid": uid,
                        "longitude": json.loads(res["content"])["locationLongitude"],
                        "latitude": json.loads(res["content"])["locationLatitude"],
                    }
                else:
                    if not is_all_sign and CheckVar6.get():
                        if CheckVar5.get():
                            if num != sign_num:
                                return
                            while True:
                                try:
                                    res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                    res1 = json.loads(res1.text)
                                    break
                                except:
                                    continue
                            student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                            show_message(text, "该签到为普通位置签到，由于您使用了反钓鱼签到模式并设置了随机使用其他已签到同学的位置信息进行签到，程序已启动班级签到情况监控，待已签人数多于未签人数后自动使用其他同学的位置信息进行签到")
                            while True:
                                if anti_fishing_check_in_mode(student_count, num, session, aid):
                                    thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, "location", aid, course_id, class_id, name, uid, interface, set_sign_num, button, time_label, component1, component2)
                                    return
                                else:
                                    time.sleep(2)
                                    continue
                        else:
                            if num != sign_num:
                                return
                            while True:
                                try:
                                    res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                                    res1 = json.loads(res1.text)
                                    break
                                except:
                                    continue
                            student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                            show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                            while True:
                                if anti_fishing_check_in_mode(student_count, num, session, aid):
                                    show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                                    break
                                else:
                                    time.sleep(2)
                                    continue
                    elif not is_all_sign and CheckVar5.get():
                        thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, "location", aid, course_id, class_id, name, uid, interface, set_sign_num, button, time_label, component1, component2)
                        show_message(text, "该签到为普通位置签到，由于您设置了随机使用其他已签到同学的位置信息进行签到，程序已启动对其他同学签到的监控，待其他同学签到后自动使用其他同学的位置信息进行签到")
                        return
                    for date in advance_config:
                        if str(date["courseid"]) == str(course_id) and str(date["classid"]) == str(class_id):
                            is_find = 1
                            if date["data"]["longitude"] == "" or date["data"]["latitude"] == "" or date["data"]["address"] == "":
                                if address == "" and longitude == "" and latitude == "":
                                    show_message(text, "该签到为普通位置签到，但您未设置位置信息，将使用普通签到模式执行无位置信息签到")
                                    add = ""
                                    long = "-1"
                                    lat = "-1"
                                else:
                                    show_message(text, "该签到为普通位置签到，准备使用全局位置信息进行签到")
                                    add = address
                                    long = longitude
                                    lat = latitude
                            else:
                                show_message(text, "该签到为普通位置签到，准备使用当前课程设置的自定义位置信息进行签到")
                                add = date["data"]["address"]
                                long = date["data"]["longitude"]
                                lat = date["data"]["latitude"]
                            break
                    if is_find == 0:
                        if address == "" and longitude == "" and latitude == "":
                            show_message(text, "该签到为普通位置签到，但您未设置位置信息，将使用普通签到模式执行无位置信息签到")
                            add = ""
                            long = "-1"
                            lat = "-1"
                        else:
                            show_message(text, "该签到为普通位置签到，准备使用全局位置信息进行签到")
                            add = address
                            long = longitude
                            lat = latitude
                    data = {
                        "name": name,
                        "address": add,
                        "activeId": aid,
                        "uid": uid,
                        "longitude": long,
                        "latitude": lat,
                    }
            elif res["otherId"] == 5:
                if not is_all_sign and CheckVar6.get():
                    if num != sign_num:
                        return
                    while True:
                        try:
                            res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                            res1 = json.loads(res1.text)
                            break
                        except:
                            continue
                    student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                    show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                    while True:
                        if anti_fishing_check_in_mode(student_count, num, session, aid):
                            show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                            break
                        else:
                            time.sleep(2)
                            continue
                show_message(text, "该签到为签到码签到，签到码为“"+res["signCode"]+"”")
                data = {
                    "name": name,
                    "activeId": aid,
                    "uid": uid,
                    "signCode": res["signCode"]
                }
            else:
                if not is_all_sign and CheckVar6.get():
                    if num != sign_num:
                        return
                    while True:
                        try:
                            res1 = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId=" + str(aid) + "&appType=15&classId=" + str(class_id) + "&fid=0", headers=browser_headers)
                            res1 = json.loads(res1.text)
                            break
                        except:
                            continue
                    student_count = res1["data"]["weiqian"] + res1["data"]["yiqian"]
                    show_message(text, "由于您使用了反钓鱼签到模式，程序已启动班级签到情况监控，待已签人数多于未签人数后自动进行签到")
                    while True:
                        if anti_fishing_check_in_mode(student_count, num, session, aid):
                            show_message(text, "检测到课程“" + lesson_name + "”发布的名称为“" + aname + "”的签到已签人数已多于未签人数，开始进行签到")
                            break
                        else:
                            time.sleep(2)
                            continue
                show_message(text, "该签到为未知类型签到，尝试使用全局信息进行签到")
                data = {
                    "name": name,
                    "address": address,
                    "activeId": aid,
                    "uid": uid,
                    "longitude": longitude,
                    "latitude": latitude,
                    "objectId": pictureid,
                    "signCode": res["signCode"]
                }
            while True:
                try:
                    session.get("https://mobilelearn.chaoxing.com/newsign/preSign?courseId="+str(course_id)+"&classId="+str(class_id)+"&activePrimaryId="+str(aid)+"&general=1&sys=1&ls=1&appType=15&&uid="+str(uid)+"&ut=s", headers=browser_headers)
                    break
                except:
                    continue
            if num != sign_num:
                return
            if interface == 1 and _is_loop == 0:
                num = sign_num
                show_message(text, "等待"+str(frequency)+"秒后开始签到")
                time.sleep(frequency)
            while True:
                try:
                    r = session.post(url, data=data, headers=browser_headers)
                    break
                except:
                    continue
            txt = r.text
            if num != sign_num:
                return
            if txt == "success" or txt == "success2":
                successful_sign_in_number += 1
                if interface == 1:
                    label.configure(text="websockets连接成功，已收到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动")
                show_message(text, "自动签到成功")
                if set_sign_num and successful_sign_in_number >= int(stop_sign_num.get()):
                    stop_sign_up_for_customize_classes(2, interface, session, label, text, button, time_label, component1, component2)
            else:
                show_message(text, "自动签到失败，学习通提示“"+str(txt)+"”，请自行在学习通APP中检查签到情况")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def anti_fishing_check_in_mode(student_count, num, session, aid):
    try:
        if num != sign_num:
            return
        while True:
            try:
                res = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getCount?activeId="+str(aid)+"&appType=15", headers=browser_headers)
                res = json.loads(res.text)
                break
            except:
                continue
        if res["data"]["yiqian"] >= student_count-res["data"]["yiqian"]:
            return True
        else:
            return False
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def monitor_the_sign_in_of_other_students(num, session, text, label, sign_type, aid, courseid, classid, name, uid, interface, set_sign_num, button, time_label, component1, component2):
    global successful_sign_in_number
    try:
        if num != sign_num:
            return
        while True:
            try:
                res = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getCount?activeId="+str(aid)+"&appType=15", headers=browser_headers)
                res = json.loads(res.text)
                break
            except:
                continue
        if res["result"] and res["data"]["yiqian"] > 0:
            if num != sign_num:
                return
            if sign_type == "photo":
                while True:
                    try:
                        res = session.get("https://mobilelearn.chaoxing.com/widget/sign/pcTeaSignController/getAttendList?activeId="+str(aid)+"&appType=15&classId="+str(classid)+"&fid=0", headers=browser_headers)
                        res = json.loads(res.text)
                        break
                    except:
                        continue
                if res["result"]:
                    if num != sign_num:
                        return
                    classmate_info = random.choice(res["data"]["yiqianList"])
                    show_message(text, "随机使用"+classmate_info["name"]+"同学的拍照图片进行签到")
                    data = {
                        "name": name,
                        "activeId": aid,
                        "uid": uid,
                        "objectId": classmate_info["title"]
                    }
                    while True:
                        try:
                            session.get("https://mobilelearn.chaoxing.com/newsign/preSign?courseId=" + str(courseid) + "&classId=" + str(classid) + "&activePrimaryId=" + str(aid) + "&general=1&sys=1&ls=1&appType=15&&uid=" + str(uid) + "&ut=s", headers=browser_headers)
                            break
                        except:
                            continue
                    if num != sign_num:
                        return
                    while True:
                        try:
                            r = session.post("https://mobilelearn.chaoxing.com/pptSign/stuSignajax", data=data, headers=browser_headers)
                            break
                        except:
                            continue
                    txt = r.text
                    if num != sign_num:
                        return
                    if txt == "success" or txt == "success2":
                        successful_sign_in_number += 1
                        if interface == 1:
                            label.configure(text="websockets连接成功，已收到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动")
                        show_message(text, "自动签到成功")
                        if set_sign_num and successful_sign_in_number >= int(stop_sign_num.get()):
                            stop_sign_up_for_customize_classes(2, interface, session, label, text, button, time_label, component1, component2)
                    else:
                        show_message(text, "自动签到失败，学习通提示“"+str(txt)+"”，请自行在学习通APP中检查签到情况")
                else:
                    root.after(10000, lambda: thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, sign_type, aid, courseid, classid, name, uid, interface, set_sign_num, button, time_label, component1, component2))
            elif sign_type == "location":
                while True:
                    try:
                        res = session.get("https://mobilelearn.chaoxing.com/pptSign/refeashSignList4Json2?activeId="+str(aid)+"&lastTime=&lastId=0&pageNo=1&appType=15&type=0", headers=browser_headers)
                        res = json.loads(res.text)
                        break
                    except:
                        continue
                if res["activeStatus"]:
                    if num != sign_num:
                        return
                    classmate_info = random.choice(res["list"])
                    show_message(text, "随机使用"+classmate_info["name"]+"同学的位置信息进行签到")
                    data = {
                        "name": name,
                        "address": classmate_info["title"],
                        "activeId": aid,
                        "uid": uid,
                        "longitude": classmate_info["longitude"],
                        "latitude": classmate_info["latitude"],
                    }
                    while True:
                        try:
                            session.get("https://mobilelearn.chaoxing.com/newsign/preSign?courseId=" + str(courseid) + "&classId=" + str(classid) + "&activePrimaryId=" + str(aid) + "&general=1&sys=1&ls=1&appType=15&&uid=" + str(uid) + "&ut=s", headers=browser_headers)
                            break
                        except:
                            continue
                    if num != sign_num:
                        return
                    while True:
                        try:
                            r = session.post("https://mobilelearn.chaoxing.com/pptSign/stuSignajax", data=data, headers=browser_headers)
                            break
                        except:
                            continue
                    txt = r.text
                    if num != sign_num:
                        return
                    if txt == "success" or txt == "success2":
                        successful_sign_in_number += 1
                        if interface == 1:
                            label.configure(text="websockets连接成功，已收到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动")
                        show_message(text, "自动签到成功")
                        if set_sign_num and successful_sign_in_number >= int(stop_sign_num.get()):
                            stop_sign_up_for_customize_classes(2, interface, session, label, text, button, time_label, component1, component2)
                    else:
                        show_message(text, "自动签到失败，学习通提示“"+str(txt)+"”，请自行在学习通APP中检查签到情况")
                else:
                    root.after(10000, lambda: thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, sign_type, aid, courseid, classid, name, uid, interface, set_sign_num, button, time_label, component1, component2))
        else:
            root.after(10000, lambda: thread_it(monitor_the_sign_in_of_other_students, num, session, text, label, sign_type, aid, courseid, classid, name, uid, interface, set_sign_num, button, time_label, component1, component2))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def detecting_shear_plate_qrcode_picture(label, input_label):
    try:
        im = ImageGrab.grabclipboard()
        if isinstance(im, Image.Image):
            try:
                im.save("qrcode.jpg")
                detector = cv2.wechat_qrcode_WeChatQRCode()
                img = cv2.imread("qrcode.jpg")
                res, points = detector.detectAndDecode(img)
                is_find = 0
                for rr in res:
                    parsed_url = urlparse(rr)
                    query_params = parse_qs(parsed_url.query)
                    aid = query_params.get("id", [''])[0]
                    if aid != "":
                        is_find = 1
                        input_label.delete(0, tk.END)
                        input_label.insert(0, rr)
                        label.configure(text="二维码扫描成功", style="Green.TLabel")
                        break
                if is_find == 0:
                    label.configure(text="剪切板未发现学习通二维码", style="Red.TLabel")
            except:
                label.configure(text="剪切板未发现学习通二维码", style="Red.TLabel")
        elif im:
            for filename in im:
                try:
                    detector = cv2.wechat_qrcode_WeChatQRCode()
                    img = cv2.imread(filename)
                    res, points = detector.detectAndDecode(img)
                    is_find = 0
                    for rr in res:
                        parsed_url = urlparse(rr)
                        query_params = parse_qs(parsed_url.query)
                        aid = query_params.get("id", [''])[0]
                        if aid != "":
                            is_find = 1
                            input_label.delete(0, tk.END)
                            input_label.insert(0, rr)
                            label.configure(text="二维码扫描成功", style="Green.TLabel")
                            break
                    if is_find == 0:
                        label.configure(text="剪切板未发现学习通二维码", style="Red.TLabel")
                except:
                    label.configure(text="剪切板未发现学习通二维码", style="Red.TLabel")
        else:
            label.configure(text="剪切板未检测到图片", style="Red.TLabel")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def select_the_local_qrcode_picture(window, label, input_label):
    try:
        filepath = filedialog.askopenfilename(title="选择二维码图片", filetypes=(("图片文件", ".jpg;*.png;*.bmp"),), parent=window)
        if filepath != "":
            try:
                detector = cv2.wechat_qrcode_WeChatQRCode()
                img = cv2.imread(filepath)
                res, points = detector.detectAndDecode(img)
                is_find = 0
                for rr in res:
                    parsed_url = urlparse(rr)
                    query_params = parse_qs(parsed_url.query)
                    aid = query_params.get("id", [''])[0]
                    if aid != "":
                        is_find = 1
                        input_label.delete(0, tk.END)
                        input_label.insert(0, rr)
                        label.configure(text="二维码扫描成功", style="Green.TLabel")
                        break
                if is_find == 0:
                    label.configure(text="图片中未发现学习通二维码", style="Red.TLabel")
            except:
                label.configure(text="图片中未发现学习通二维码", style="Red.TLabel")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def qrcode_sign_ws_monitor(name, set_sign_num, button, time_label, component1, component2, is_all_sign):
    global qrcode_sign_ws, qrcode_sign_ws_get_connect_time
    try:
        qrcode_sign_ws = websocket.WebSocketApp("ws://43.154.186.6:8765/ws", on_message=lambda _ws, message: thread_it(qrcode_sign_message, _ws, message, set_sign_num, button, time_label, component1, component2, is_all_sign), on_open=lambda _ws: thread_it(qrcode_sign_open, _ws, name, set_sign_num, button, time_label, component1, component2, is_all_sign))
        qrcode_sign_ws_get_connect_time = time.time()
        thread_it(check_sign_ws_connect_time, name, set_sign_num, button, time_label, component1, component2, is_all_sign)
        qrcode_sign_ws.run_forever()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_sign_ws_connect_time(name, set_sign_num, button, time_label, component1, component2, is_all_sign):
    global qrcode_sign_ws_connect_after_id
    try:
        if time.time() > qrcode_sign_ws_get_connect_time+10:
            qrcode_sign_ws.close()
            thread_it(qrcode_sign_ws_monitor, name, set_sign_num, button, time_label, component1, component2, is_all_sign)
        else:
            qrcode_sign_ws_connect_after_id = root.after(1000, lambda: check_sign_ws_connect_time(name, set_sign_num, button, time_label, component1, component2, is_all_sign))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def qrcode_sign_open(_ws, name, set_sign_num, button, time_label, component1, component2, is_all_sign):
    global uuid_id, qrcode_sign_ws_get_heartbeat_message_time
    try:
        root.after_cancel(qrcode_sign_ws_connect_after_id)
        qrcode_sign_ws_get_heartbeat_message_time = time.time()
        check_sign_ws_heartbeat_message_time(name, set_sign_num, button, time_label, component1, component2, is_all_sign)
        t = int(time.time())
        temp_list = []
        for d in qrcode_sign_list:
            temp_list.append(d["aid"])
        data = {"t": t, "device_id": encrypt("ChaoXing-sign-program_"+uuid_id+name, "4c6f" + str(t) + "9f2d", uuid_id[:16]), "uuid": uuid_id, "qrcode_sign_list": temp_list}
        data = encrypt(json.dumps(data), "d1a7e1f8-8d7b-4c6f", "9f2d9a7d7e1c8d7b")
        _ws.send(data)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_sign_ws_heartbeat_message_time(name, set_sign_num, button, time_label, component1, component2, is_all_sign):
    global qrcode_sign_ws_heartbeat_after_id
    try:
        if time.time() > qrcode_sign_ws_get_heartbeat_message_time + 30:
            qrcode_sign_ws.close()
            thread_it(qrcode_sign_ws_monitor, name, set_sign_num, button, time_label, component1, component2, is_all_sign)
        else:
            qrcode_sign_ws_heartbeat_after_id = root.after(1000, lambda: check_sign_ws_heartbeat_message_time(name, set_sign_num, button, time_label, component1, component2, is_all_sign))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def qrcode_sign_message(_ws, message, set_sign_num, button, time_label, component1, component2, is_all_sign):
    global qrcode_sign_ws_get_heartbeat_message_time
    try:
        key = "w$^i7DQ#CjXy6kLxv+mNz0K!e_3pUJW"
        iv_end = "jKZg1T9Q8uNlH3vy"
        if message == "ping":
            qrcode_sign_ws_get_heartbeat_message_time = time.time()
        else:
            message = decrypt(message, key, iv_end)
            message = json.loads(message)
            for d in qrcode_sign_list:
                if d["aid"] == message["aid"]:
                    sign_in_manually_ws(d["session"], d["text"], d["label"], d["name"], d["courseid"], d["classid"], d["aid"], d["uid"], message["qrcode_info"], d["lesson_name"], d["interface"], set_sign_num, button, time_label, component1, component2, is_all_sign, d["location"])
                    break
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def sign_in_manually_ws(session, text, label, name, courseid, classid, aid, uid, qrcode_info, lesson_name, interface, set_sign_num, button, time_label, component1, component2, is_all_sign, location):
    global successful_sign_in_number
    try:
        enc_decode = urllib.parse.unquote(qrcode_info)
        enc_txt = enc_decode[enc_decode.find("&enc=")+5:]
        enc_code = enc_txt[:enc_txt.find("&")]
        url = "https://mobilelearn.chaoxing.com/pptSign/stuSignajax?enc="+str(enc_code)+"&name="+str(name)+"&activeId=" + str(aid) + "&uid="+str(uid)+"&useragent="+"&latitude=-1&longitude=-1&appType=15&location="+location
        while True:
            try:
                session.get("https://mobilelearn.chaoxing.com/newsign/preSign?courseId=" + str(courseid) + "&classId=" + str(classid) + "&activePrimaryId=" + str(aid) + "&general=1&sys=1&ls=1&appType=15&&uid=" + str(uid) + "&ut=s", headers=browser_headers)
                r = session.get(url, headers=browser_headers)
                break
            except:
                continue
        txt = r.text
        if txt == "success" or txt == "success2":
            successful_sign_in_number += 1
            if interface == 1:
                label.configure(text="websockets连接成功，已收到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动")
            else:
                if is_all_sign:
                    label.configure(text="签到监控已启动，已查询到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动，已检查全部课程签到活动" + str(sign_number) + "次")
                else:
                    label.configure(text="签到监控已启动，已查询到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动，已检查所选课程签到活动" + str(sign_number) + "次")
            show_message(text, "云端获取到课程"+lesson_name+"的二维码签到的二维码参数，自动签到成功")
            for i in range(len(qrcode_sign_list)):
                if qrcode_sign_list[i]["aid"] == str(aid):
                    del qrcode_sign_list[i]
                    break
            if "code_sign_window_" + str(aid) in check_qrcode_sign_window_list.keys():
                check_qrcode_sign_window_list["code_sign_window_" + str(aid)].destroy()
                del check_qrcode_sign_window_list["code_sign_window_" + str(aid)]
            if len(qrcode_sign_list) == 0:
                root.after_cancel(qrcode_sign_ws_heartbeat_after_id)
                qrcode_sign_ws.close()
            if set_sign_num and successful_sign_in_number >= int(stop_sign_num.get()):
                stop_sign_up_for_customize_classes(2, interface, session, label, text, button, time_label, component1, component2)
        else:
            show_message(text, "云端获取到课程"+lesson_name+"的二维码签到的二维码参数，但自动签到失败，学习通提示“" + str(txt) + "”，二维码可能已过期，程序将继续监控")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def to_sign_in(text, aid):
    try:
        for i in range(len(qrcode_sign_list)):
            if qrcode_sign_list[i]["aid"] == str(aid):
                del qrcode_sign_list[i]
                break
        if len(qrcode_sign_list) == 0:
            root.after_cancel(qrcode_sign_ws_heartbeat_after_id)
            qrcode_sign_ws.close()
        check_qrcode_sign_window_list["code_sign_window_" + str(aid)].destroy()
        del check_qrcode_sign_window_list["code_sign_window_" + str(aid)]
        show_message(text, "用户已自行签到")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def sign_in_manually(session, labels, label, text, name, courseid, classid, aid, uid, enc_text, interface, share_switch, component, set_sign_num, button, time_label, component1, component2, is_all_sign, location):
    global successful_sign_in_number
    try:
        if enc_text == "":
            label.configure(text="请输入二维码内容", style="Red.TLabel")
            return
        for c in component:
            c.configure(state="disabled")
        label.configure(text="正在签到……", style="Blue.TLabel")
        enc_decode = urllib.parse.unquote(enc_text)
        enc_txt = enc_decode[enc_decode.find("&enc=")+5:]
        enc_code = enc_txt[:enc_txt.find("&")]
        url = "https://mobilelearn.chaoxing.com/pptSign/stuSignajax?enc="+str(enc_code)+"&name="+str(name)+"&activeId=" + str(aid) + "&uid="+str(uid)+"&useragent="+"&latitude=-1&longitude=-1&appType=15&location="+location
        while True:
            try:
                session.get("https://mobilelearn.chaoxing.com/newsign/preSign?courseId=" + str(courseid) + "&classId=" + str(classid) + "&activePrimaryId=" + str(aid) + "&general=1&sys=1&ls=1&appType=15&&uid=" + str(uid) + "&ut=s", headers=browser_headers)
                r = session.get(url, headers=browser_headers)
                break
            except:
                continue
        txt = r.text
        if txt == "success" or txt == "success2":
            for i in range(len(qrcode_sign_list)):
                if qrcode_sign_list[i]["aid"] == str(aid):
                    del qrcode_sign_list[i]
                    break
            if share_switch:
                auth_key = "55c4bdaa583ef4e7cada7d3370a6a30b"
                auth_iv = "f236285fb8767ca0"
                tt = int(time.time())
                date = json.dumps({"t": tt, "aid": str(aid), "qrcode_info": enc_text})
                data = {"type": "submit", "data": encrypt(date, auth_key, auth_iv), "token": md5(("type=submit&_=" + str(tt) + "&qrcode-info=" + enc_text + "&activeId=" + str(aid)).encode("utf-8")).hexdigest()}
                res = requests.post("https://43.154.186.6:8888/get_qrcode", data=data)
                res = json.loads(res.text)
                if res["result"]:
                    ttt = "，二维码内容分享成功"
                else:
                    ttt = "，但二维码内容分享失败，云端提示“"+res["errorMsg"]+"”"
            else:
                ttt = ""
            if len(qrcode_sign_list) == 0:
                root.after_cancel(qrcode_sign_ws_heartbeat_after_id)
                qrcode_sign_ws.close()
            successful_sign_in_number += 1
            if interface == 1:
                labels.configure(text="websockets连接成功，已收到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动")
            else:
                if is_all_sign:
                    labels.configure(text="签到监控已启动，已查询到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动，已检查全部课程签到活动" + str(sign_number) + "次")
                else:
                    labels.configure(text="签到监控已启动，已查询到" + str(number_of_detected_sign_in) + "个签到活动，程序成功完成" + str(successful_sign_in_number) + "个签到活动，已检查所选课程签到活动" + str(sign_number) + "次")
            show_message(text, "手动签到成功")
            check_qrcode_sign_window_list["code_sign_window_" + str(aid)].destroy()
            del check_qrcode_sign_window_list["code_sign_window_" + str(aid)]
            messagebox.showinfo("提示", "恭喜您，手动签到成功"+ttt+"！", parent=root)
            if set_sign_num and successful_sign_in_number >= int(stop_sign_num.get()):
                stop_sign_up_for_customize_classes(2, interface, session, labels, text, button, time_label, component1, component2)
        else:
            for c in component:
                c.configure(state="normal")
            label.configure(text="")
            show_message(text, "手动签到失败，学习通提示“" + str(txt) + "”，请检查您的二维码内容后重试或自行在学习通APP中检查签到情况")
            messagebox.showinfo("提示", "手动签到失败，学习通提示“" + str(txt) + "”，请检查您的二维码内容后重试或自行在学习通APP中检查签到情况！", parent=check_qrcode_sign_window_list["code_sign_window_" + str(aid)])
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def close_qrcode_window(aid):
    try:
        check_qrcode_sign_window_list["code_sign_window_"+str(aid)].destroy()
        del check_qrcode_sign_window_list["code_sign_window_"+str(aid)]
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def BuildReleaseSession(chatid, session):
    try:
        return bytearray([0x08, 0x00, 0x40, 0x00, 0x4a])+chr(len(chatid)+38).encode("utf-8")+b"\x10"+session+bytearray([0x1a, 0x29, 0x12])+chr(len(chatid)).encode("utf-8")+chatid.encode("utf-8")+bytesend+bytearray([0x58, 0x00])
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def GetAttachment(byte, start, end):
    try:
        start = bytes_index_of(byte, BytesAttachment, start, end)
        if start == -1:
            return None
        start += len(BytesAttachment)
        length = byte[start] + (byte[start+1] - 1) * 0x80
        start += 2
        s = start
        start += length
        e = start
        j = json.loads(byte[s:e].decode("utf-8"))
        return None if start > end else j
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def bytes_index_of(byte, value, start=0, end=0):
    try:
        length = len(value)
        len_bytes = len(byte)
        if length == 0 or len_bytes == 0:
            return -1
        first = value[0]
        for i in range(start, len_bytes if end == 0 else end):
            if byte[i] != first:
                continue
            is_return = True
            for j in range(1, length):
                if byte[i + j] == value[j]:
                    continue
                is_return = False
                break
            if is_return:
                return i
        return -1
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_the_course_list(session, component1, component2):
    try:
        is_find = 0
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                is_find = 1
                user_config = json.loads(decrypt(program_config[i]["user_config"], decrypt(program_config[i]["password"], password_key)))
                break
        if is_find == 0:
            messagebox.showwarning("加载失败", "用户配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
            component1[0].after_cancel(timer_id)
            component1[1].after_cancel(temp_timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            login_window(0, component2)
            return 2
        advance_config = user_config["advance_config"]
        course_parameters = user_config["course_parameters"]
        try:
            res = session.get("https://mooc1-api.chaoxing.com/mycourse/backclazzdata?view=json&rss=1", headers=browser_headers, timeout=10)
            cdata = json.loads(res.content.decode(encoding="utf-8"))
        except:
            messagebox.showwarning("课程列表获取失败", "由于网络连接异常，课程列表获取失败，请检查您的网络后重试")
            return 1
        if cdata["result"] != 1:
            return 1
        coursedata = []
        for item in cdata["channelList"]:
            if item["cataid"] == "100000002" and item["content"]["roletype"] == 3 and item["content"]["state"] == 0:
                try:
                    teach = item["content"]["course"]["data"][0]["teacherfactor"]
                    if teach != "":
                        teacher = item["content"]["course"]["data"][0]["teacherfactor"]
                    else:
                        teacher = "未知教师"
                except:
                    teach = ""
                    teacher = "未知教师"
                pushdata = {"courseid": str(item["content"]["course"]["data"][0]["id"]), "name": item["content"]["course"]["data"][0]["name"], "classid": str(item["content"]["id"]), "cpi": str(item["content"]["cpi"]), "teacher": teacher}
                coursedata.append(pushdata)
                is_find = 0
                for d in advance_config:
                    if str(d["courseid"]) == str(item["content"]["course"]["data"][0]["id"]) and str(d["classid"]) == str(item["content"]["id"]):
                        is_find = 1
                        break
                if is_find == 0:
                    advance_config.append({"courseid": str(item["content"]["course"]["data"][0]["id"]), "classid": str(item["content"]["id"]), "data": {"address": "", "latitude": "", "longitude": "", "pictureid": ""}})
                is_find = 0
                for d in course_parameters:
                    if str(d["courseid"]) == str(item["content"]["course"]["data"][0]["id"]) and str(d["classid"]) == str(item["content"]["id"]):
                        is_find = 1
                        break
                if is_find == 0:
                    temp = []
                    temp_cookie = session.cookies
                    try:
                        res = session.get("https://mobilelearn.chaoxing.com/v2/apis/class/getClassDetail?fid=0&courseId=" + str(item["content"]["course"]["data"][0]["id"]) + "&classId=" + str(item["content"]["id"]), headers=browser_headers, timeout=10)
                        res = json.loads(res.text)
                    except:
                        messagebox.showwarning("课程列表获取失败", "由于网络连接异常，课程列表获取失败，请检查您的网络后重试")
                        return 1
                    if res["result"] and "creatoruserid" in res["data"].keys():
                        temp.append(res["data"]["creatoruserid"])
                    else:
                        num = 0
                        url1 = "https://mooc1-1.chaoxing.com/visit/stucoursemiddle?courseid=" + str(item["content"]["course"]["data"][0]["id"]) + "&clazzid=" + str(item["content"]["id"]) + "&vc=1&cpi=" + str(item["content"]["cpi"]) + "&ismooc2=1&v=2"
                        try:
                            res1 = requests.get(url1, headers=browser_headers, cookies=temp_cookie)
                        except:
                            messagebox.showwarning("课程列表获取失败", "由于网络连接异常，课程列表获取失败，请检查您的网络后重试")
                            return 1
                        if res1.url != url1:
                            url2 = res1.url
                            if "passport2.chaoxing.com" in url2:
                                messagebox.showwarning("课程列表获取失败", "由于网络连接异常，课程列表获取失败，请检查您的网络后重试")
                                return 1
                            enc = url2[url2.find("enc=") + 4:url2.find("enc=") + url2[url2.find("enc="):].find("&")]
                            t = url2[url2.find("t=") + 2:url2.find("t=") + url2[url2.find("t="):].find("&")]
                            url = "https://groupweb.chaoxing.com/course/topic/topicList?bbsid=" + str(item["content"]["bbsid"]) + "&courseid=" + str(item["content"]["course"]["data"][0]["id"]) + "&clazzid=" + str(item["content"]["id"]) + "&cpi=" + str(item["content"]["cpi"]) + "&ut=s&t=" + t + "&enc=" + enc
                            try:
                                res = requests.get(url, headers=browser_headers, cookies=temp_cookie)
                            except:
                                messagebox.showwarning("课程列表获取失败", "由于网络连接异常，课程列表获取失败，请检查您的网络后重试")
                                return 1
                            if res.url != url:
                                messagebox.showwarning("课程列表获取失败", "由于网络连接异常，课程列表获取失败，请检查您的网络后重试")
                                return 1
                            tree = BeautifulSoup(res.text, "html.parser")
                            for j in tree.find_all(name="script"):
                                if j.string is not None:
                                    if "国际化变量" in j.string:
                                        dtat = j.string[j.string.find("window.obj = ") + 13:j.string.rfind("};") + 1]
                                        da = dtat.split("\n")
                                        for t in da:
                                            if "managers" in t:
                                                tt = t[t.find("["):t.rfind("]") + 1]
                                                tt = json.loads(tt)
                                                for p in tt:
                                                    if p["personName"] == teach and teach != "":
                                                        temp.append(p["puid"])
                                                        num += 1
                                                        break
                                                if num == 0:
                                                    for p in tt:
                                                        temp.append(p["puid"])
                                                    num = 1
                                                    break
                                                else:
                                                    break
                    course_parameters.append({"courseid": str(item["content"]["course"]["data"][0]["id"]), "classid": str(item["content"]["id"]), "creatoruserid": temp})
        user_config["advance_config"] = advance_config
        user_config["course_parameters"] = course_parameters
        is_find = 0
        for i in range(len(program_config)):
            if program_user == decrypt(program_config[i]["username"], username_key):
                is_find = 1
                program_config[i]["user_config"] = encrypt(json.dumps(user_config), decrypt(program_config[i]["password"], password_key))
                with open(realpath + "\\" + program_config_file, "w") as file:
                    file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                break
        if is_find == 0:
            messagebox.showwarning("加载失败", "用户配置加载失败，您的程序配置文件可能已损坏，请重新登录您的学习通账号", parent=root)
            component1[0].after_cancel(timer_id)
            component1[1].after_cancel(temp_timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            login_window(0, component2)
            return 2
        return coursedata
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def show_message(text, msg):
    try:
        s = datetime.datetime.strftime(datetime.datetime.now(), "%H:%M:%S ") + msg + "\n"
        text.configure(state="normal")
        text.insert(tk.END, s)
        text.configure(state="disabled")
        text.see(tk.END)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def return_main_window(label, component):
    try:
        root.geometry("1000x500")
        mainmenu.entryconfigure(1, state="normal")
        label.after_cancel(temp_timer_id)
        for c in component:
            c.destroy()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_the_frequency_input_box(label, text):
    try:
        label.configure(text=text)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def show_system_time(lb, num):
    global timer_id, temp_timer_id
    try:
        if num == 1:
            timestr = time.strftime("%Y-%m-%d %H:%M:%S")
            lb.configure(text="当前系统时间：" + timestr)
            timer_id = lb.after(100, lambda: show_system_time(lb, num))
        else:
            timestr = time.strftime("%Y-%m-%d %H:%M:%S")
            lb.configure(text="当前系统时间：" + timestr)
            temp_timer_id = lb.after(100, lambda: show_system_time(lb, num))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def exit_account(component):
    try:
        if messagebox.askyesno("提示", "确定要退出当前账号吗？", parent=root):
            component[0].after_cancel(timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            check_configuration_file(0, component)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def delete_account(component):
    try:
        if messagebox.askyesno("提示", "确定要删除当前账号吗？您的签到信息也将一并清除", parent=root):
            for i in range(len(program_config)):
                if program_user == decrypt(program_config[i]["username"], username_key):
                    del program_config[i]
                    break
            with open(realpath + "\\" + program_config_file, "w") as file:
                file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
            messagebox.showinfo("删除成功", "账号删除成功，请重新登录", parent=root)
            component[0].after_cancel(timer_id)
            root.geometry("1000x300")
            mainmenu.delete(1)
            check_configuration_file(0, component)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_username_or_password_window():
    global change_window
    try:
        if check_window_close_list[1]:
            change_window = tk.Toplevel(root)
            change_window.geometry("500x250")
            change_window.title("修改用户名密码")
            change_window.resizable(False, False)
            with open(realpath + "\\title_ico.ico", "wb+") as temp_3:
                temp_b64 = base64.b64decode(title_icon)
                temp_3.write(temp_b64)
            change_window.iconbitmap(realpath + "\\title_ico.ico")
            check_window_close_list[1] = False
            label = ttk.Label(change_window, text="当前登录用户："+program_user, font=tkFont.Font(size=11))
            label.pack()
            input_area = ttk.Label(change_window)
            input_area.place(rely=0.1, relwidth=1, relheight=1)
            change_username_label = ttk.Label(input_area, text="输入新的用户名")
            change_username_label.place(relx=0.05, rely=0.2)
            change_username_input = ttk.Entry(input_area)
            change_username_input.place(relx=0.05, rely=0.3, relwidth=0.4)
            change_username_button = ttk.Button(input_area, text="修改用户名", command=lambda: change_username_or_password(1, change_username_input.get()))
            change_username_button.place(relx=0.15, rely=0.6, relwidth=0.2, relheight=0.2)
            change_password_label = ttk.Label(input_area, text="输入新的密码")
            change_password_label.place(relx=0.55, rely=0.2)
            change_password_input = ttk.Entry(input_area, show="*")
            change_password_input.place(relx=0.55, rely=0.3, relwidth=0.4)
            change_password_button = ttk.Button(input_area, text="修改密码", command=lambda: change_username_or_password(2, change_password_input.get()))
            change_password_button.place(relx=0.65, rely=0.6, relwidth=0.2, relheight=0.2)
            change_window.protocol("WM_DELETE_WINDOW", lambda: close_a_window_that_opens_only_one(change_window, 1))
        else:
            change_window.focus_force()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def change_username_or_password(n, value):
    global program_user
    try:
        if value == "":
            messagebox.showwarning("警告", "新的用户名或密码不能为空", parent=change_window)
            return
        for d in range(len(program_config)):
            uname = decrypt(program_config[d]["username"], username_key)
            if uname == program_user:
                if n == 1:
                    for a in program_config:
                        un = decrypt(a["username"], username_key)
                        if un == value:
                            messagebox.showinfo("用户名已存在", "当前用户名已存在，请使用其它用户名", parent=change_window)
                            return
                    program_config[d]["username"] = encrypt(value, username_key)
                    with open(realpath + "\\" + program_config_file, "w") as file:
                        file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                    program_user = value
                    messagebox.showinfo("修改成功", "用户名修改成功", parent=change_window)
                    break
                else:
                    old_password = decrypt(program_config[d]["password"], password_key)
                    config = decrypt(program_config[d]["user_config"], old_password)
                    program_config[d]["password"] = encrypt(value, password_key)
                    program_config[d]["user_config"] = encrypt(config, value)
                    with open(realpath + "\\" + program_config_file, "w") as file:
                        file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                    messagebox.showinfo("修改成功", "密码修改成功", parent=change_window)
                    break
        close_a_window_that_opens_only_one(change_window, 1)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def old_to_new_window(num, old_activeid, old_zybinformation, old_conf, old_advance):
    try:
        if num:
            label1 = ttk.Label(root, text="程序检测到旧版本的配置文件，将尝试将它转换为新版本的配置文件，请输入程序访问密码以完成转换。\n或者您也可以重新登录学习通账号，但这样会导致您的旧版本配置丢失，您可能需要重新修改您的签到配置。", state="normal", font=tkFont.Font(size=11), justify="center", wraplength=720)
            label1.place(relx=0.16, rely=0.1)
            label2 = ttk.Label(root, text="输入旧版本程序访问密码")
            password = ttk.Entry(root, show="*", justify="left")
            password.place(relx=0.2, rely=0.47, relwidth=0.6)
            password.focus_force()
            label2.place(relx=0.2, rely=0.4)
            determine = ttk.Button(root, text="确定", command=lambda: thread_it(old_to_new, determine, password.get(), old_activeid, old_zybinformation, old_conf, old_advance, [label1, label2, password, determine, Re_login]))
            determine.place(relx=0.16, rely=0.7, relwidth=0.15, relheight=0.15)
            Re_login = ttk.Button(root, text="重新登录", command=lambda: login_window(1, [label1, label2, password, determine, Re_login]))
            Re_login.place(relx=0.69, rely=0.7, relwidth=0.15, relheight=0.15)
            password.bind("<Return>", lambda event: thread_it(old_to_new, determine, password.get(), old_activeid, old_zybinformation, old_conf, old_advance, [label1, label2, password, determine, Re_login]))
        else:
            login_program_window([])
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def login_program_window(component):
    try:
        for c in component:
            c.destroy()
        welcome_label = ttk.Label(root, text="\n欢迎使用学习通自动签到程序", font=tkFont.Font(size=20, family="黑体"))
        welcome_label.pack()
        username_label = ttk.Label(root, text="程序访问用户名")
        username_label.place(relx=0.3, rely=0.28)
        username_list = ttk.Combobox(root, state="readonly")
        username_list.bind("<<ComboboxSelected>>", lambda event: check_remember_password(username_list.get(), var, password_input))
        username_list.place(relx=0.3, rely=0.35, relwidth=0.4)
        password_label = ttk.Label(root, text="程序访问密码")
        password_label.place(relx=0.3, rely=0.48)
        password_input = ttk.Entry(root, show="*")
        password_input.place(relx=0.3, rely=0.55, relwidth=0.4)
        var = tk.BooleanVar(value=False)
        is_remember_password_checkbutton = ttk.Checkbutton(root, text="记住密码", variable=var)
        is_remember_password_checkbutton.place(relx=0.71, rely=0.55)
        tips_label = ttk.Label(root)
        tips_label.place(relx=0.3, rely=0.65)
        determine = ttk.Button(root, text="登录程序", command=lambda: thread_it(program_login_check, username_list.get(), password_input.get(), var.get(), tips_label, [username_list, password_input, is_remember_password_checkbutton, determine, Re_login], [welcome_label, username_label, username_list, password_label, password_input, is_remember_password_checkbutton, determine, Re_login]))
        determine.place(relx=0.25, rely=0.75, relwidth=0.15, relheight=0.15)
        Re_login = ttk.Button(root, text="忘记密码/重新登录学习通账号", command=lambda: login_window(1, [welcome_label, username_label, username_list, password_label, password_input, is_remember_password_checkbutton, tips_label, determine, Re_login]))
        Re_login.place(relx=0.55, rely=0.75, relwidth=0.25, relheight=0.15)
        username_list["values"] = get_username_list()
        username_list.set(username_list["values"][0])
        check_remember_password(username_list.get(), var, password_input)
        password_input.bind("<Return>", lambda event: thread_it(program_login_check, username_list.get(), password_input.get(), var.get(), tips_label, [username_list, password_input, is_remember_password_checkbutton, determine, Re_login], [welcome_label, username_label, username_list, password_label, password_input, is_remember_password_checkbutton, determine, Re_login]))
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def check_remember_password(username, var, password_input):
    try:
        for d in range(len(program_config)):
            uname = decrypt(program_config[d]["username"], username_key)
            if uname == username:
                pword = decrypt(program_config[d]["password"], password_key)
                remember_password = json.loads(decrypt(program_config[d]["user_config"], pword))["remeber_password"]
                if remember_password:
                    var.set(remember_password)
                    password_input.delete(0, tk.END)
                    password_input.insert(0, pword)
                else:
                    var.set(remember_password)
                    password_input.delete(0, tk.END)
                break
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def program_login_check(username, password, checkbutton_state, label, component1, component2):
    global program_user
    try:
        if username == "" or password == "":
            label.configure(text="程序访问用户名密码不能为空", style="Red.TLabel")
            return
        label.configure(text="登录中……", style="Blue.TLabel")
        for c in component1:
            c.configure(state="disabled")
        for d in range(len(program_config)):
            uname = decrypt(program_config[d]["username"], username_key)
            if uname == username:
                pword = decrypt(program_config[d]["password"], password_key)
                if pword == password:
                    config = json.loads(decrypt(program_config[d]["user_config"], pword))
                    if config["cx_login_config"]["cxusername"] != "" and config["cx_login_config"]["cxpassword"] != "":
                        cxusername = config["cx_login_config"]["cxusername"]
                        cxpassword = config["cx_login_config"]["cxpassword"]
                        cxschoolid = config["cx_login_config"]["cxschoolid"]
                        result = cx_login_check(username=cxusername, password=cxpassword, schoolid=cxschoolid)
                        if not result[0] and result[1] == 0:
                            for c in component1:
                                c.configure(state="normal")
                            label.configure(text="登录失败，网络连接异常", style="Red.TLabel")
                            return
                        elif not result[0] and result[1] == 2:
                            for c in component1:
                                c.configure(state="normal")
                            label.configure(text="登录失败，配置文件保存的学习通账号密码错误，请重新登录您的学习通账号", style="Red.TLabel")
                            return
                        else:
                            uid = result[1]
                            name = result[2]
                            session = result[3]
                            if uid != config["cx_login_config"]["uid"]:
                                config["cx_login_config"]["uid"] = uid
                            if name != config["cx_login_config"]["cxname"]:
                                config["cx_login_config"]["cxname"] = name
                            if config["remeber_password"] != checkbutton_state:
                                config["remeber_password"] = checkbutton_state
                            last_login_time = config["last_login_time"]
                            config["cx_login_config"]["cxcookies"] = json.dumps(session.cookies.get_dict())
                            if last_login_time == 0:
                                last_login_time = "未知"
                            else:
                                last_login_time = datetime.datetime.fromtimestamp(last_login_time)
                            config["last_login_time"] = int(time.time())
                            program_config[d]["user_config"] = encrypt(json.dumps(config), pword)
                            with open(realpath + "\\" + program_config_file, "w") as file:
                                file.write("# 学习通自动签到程序配置文件，勿删\n"+encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                            messagebox.showinfo("欢迎回来", "亲爱的" + str(name) + "同学，欢迎使用学习通自动签到程序\n您上次登录时间："+str(last_login_time), parent=root)
                            component2.append(label)
                            program_user = username
                            thread_it(main_window, session, name, uid, component2, config)
                            return
                    else:
                        cxcookies = json.loads(config["cx_login_config"]["cxcookies"])
                        result = cx_login_check(cookies=cxcookies)
                        if not result[0] and result[1] == 0:
                            for c in component1:
                                c.configure(state="normal")
                            label.configure(text="登录失败，网络连接异常", style="Red.TLabel")
                            return
                        elif not result[0] and result[1] == 2:
                            for c in component1:
                                c.configure(state="normal")
                            label.configure(text="登录失败，配置文件保存的Cookie已过期，请重新登录您的学习通账号", style="Red.TLabel")
                            return
                        else:
                            uid = result[1]
                            name = result[2]
                            session = result[3]
                            if uid != config["cx_login_config"]["uid"]:
                                config["cx_login_config"]["uid"] = uid
                            if name != config["cx_login_config"]["cxname"]:
                                config["cx_login_config"]["cxname"] = name
                            if config["remeber_password"] != checkbutton_state:
                                config["remeber_password"] = checkbutton_state
                            last_login_time = config["last_login_time"]
                            if last_login_time == 0:
                                last_login_time = "未知"
                            else:
                                last_login_time = datetime.datetime.fromtimestamp(last_login_time)
                            config["last_login_time"] = int(time.time())
                            program_config[d]["user_config"] = encrypt(json.dumps(config), pword)
                            with open(realpath + "\\" + program_config_file, "w") as file:
                                file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
                            messagebox.showinfo("欢迎回来", "亲爱的" + str(name) + "同学，欢迎使用学习通自动签到程序\n您上次登录时间：" + str(last_login_time), parent=root)
                            component2.append(label)
                            program_user = username
                            thread_it(main_window, session, name, uid, component2, config)
                            return
                else:
                    for c in component1:
                        c.configure(state="normal")
                    label.configure(text="密码错误，请重新输入", style="Red.TLabel")
                    return
        for c in component1:
            c.configure(state="normal")
        label.configure(text="用户名不存在，请重新输入", style="Red.TLabel")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def get_username_list():
    try:
        temp = []
        for data in program_config:
            temp.append(decrypt(data["username"], username_key))
        return temp
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def old_to_new(button, old_password, old_activeid, old_zybinformation, old_conf, old_advance, component):
    global program_config
    try:
        if old_password == "":
            messagebox.showinfo("提示", "请输入旧版本程序访问密码", parent=root)
            return
        button.configure(state="disabled")
        data = []
        if old_activeid is not None:
            activeid_list = old_activeid
        else:
            activeid_list = []
        if old_zybinformation is not None:
            try:
                temp = json.loads(old_decrypt(old_password, old_zybinformation))
                result = cx_login_check(username=temp["username"], password=temp["password"], schoolid=temp["schoolid"])
                if not result[0] and result[1] == 0:
                    if not messagebox.askyesno("提示", "程序成功解密您的学习通账号和密码，但由于网络连接问题，程序无法判断该账号密码是否正确，是否仍要将该账号密码保存到新版本配置文件中？", parent=root):
                        button.configure(state="normal")
                        return
                    else:
                        uid = ""
                        name = ""
                        cxcookies = json.dumps({})
                elif not result[0] and result[1] == 2:
                    if not messagebox.askyesno("提示", "程序成功解密您的学习通账号和密码，但使用该账号密码登录学习通失败，您的密码可能已修改，是否仍要将该账号密码保存到新版本配置文件中？", parent=root):
                        button.configure(state="normal")
                        return
                    else:
                        uid = ""
                        name = ""
                        cxcookies = json.dumps({})
                else:
                    uid = result[1]
                    name = result[2]
                    cxcookies = json.dumps(result[3].cookies.get_dict())
                cxusername = temp["username"]
                cxpassword = temp["password"]
                cxschoolid = temp["schoolid"]
            except:
                messagebox.showwarning("转换失败", "转换时出现错误，转换无法继续，这可能是由于您的旧版本程序访问密码输入错误或配置文件损坏导致的，请尝试重新输入旧版本程序访问密码，若您忘记密码则可以重新登录学习通账号", parent=root)
                button.configure(state="normal")
                return
        else:
            messagebox.showwarning("文件丢失", "未找到旧版本学习通登录配置文件，转换无法继续，请重新登录您的学习通账号", parent=root)
            button.configure(state="normal")
            return
        if old_conf is not None:
            try:
                temp = json.loads(old_decrypt(old_password, old_conf))
                address = temp["address"]
                latitude = temp["latitude"]
                longitude = temp["longitude"]
                pictureid = temp["picname"]
            except:
                messagebox.showwarning("转换失败", "转换时出现错误，转换无法继续，这可能是由于您的旧版本程序访问密码输入错误或配置文件损坏导致的，请尝试重新输入旧版本程序访问密码，若您忘记密码则可以重新登录学习通账号", parent=root)
                button.configure(state="normal")
                return
        else:
            address = ""
            latitude = ""
            longitude = ""
            pictureid = ""
        if old_advance is not None:
            try:
                advance_config = json.loads(old_decrypt(old_password, old_advance).replace("picname", "pictureid"))
            except:
                messagebox.showwarning("转换失败", "转换时出现错误，转换无法继续，这可能是由于您的旧版本程序访问密码输入错误或配置文件损坏导致的，请尝试重新输入旧版本程序访问密码，若您忘记密码则可以重新登录学习通账号", parent=root)
                button.configure(state="normal")
                return
        else:
            advance_config = []
        username = ""
        user_data = encrypt(json.dumps({"remeber_password": False, "last_login_time": 0, "cx_login_config": {"uid": uid, "cxname": name, "cxusername": cxusername, "cxpassword": cxpassword, "cxschoolid": cxschoolid, "cxcookies": cxcookies}, "cx_sign_config": {"address": address, "latitude": latitude, "longitude": longitude, "pictureid": pictureid}, "advance_config": advance_config, "signed_in_list": activeid_list, "course_parameters": []}), old_password)
        for a in range(5):
            username += random.choice(random_choice_strings)
        data.append({"username": encrypt(username, username_key), "password": encrypt(old_password, password_key), "user_config": user_data})
        program_config = data
        with open(realpath + "\\" + program_config_file, "w") as file:
            file.write("# 学习通自动签到程序配置文件，勿删\n"+encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
        with open(realpath + "\\" + "初始用户名密码.txt", "w") as file:
            file.write("初始用户名："+username+"\n初始密码："+old_password+"\n感谢您使用学习通自动签到程序")
        subprocess.call("DEL /F /A /Q \"" + realpath + "\\" + "activeid.txt\" \"" + realpath + "\\" + "zybinformation.txt\" \"" + realpath + "\\" + "conf.txt\" \"" + realpath + "\\" + "advance.txt\"", shell=True)
        messagebox.showinfo("转换成功", "旧版本配置文件转换成功，已为您随机生成用户名："+username+"，密码为您的旧版本程序访问密码，用户名和密码在您登录程序后可以自行修改，请妥善保管好您的用户名和密码，程序也已在程序目录下生成了“初始用户名密码.txt”文件，若您忘记初始用户名密码可以查看该文件，建议您在登录程序后及时修改用户名密码并删除该文件。", parent=root)
        login_program_window(component)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def search_and_save_config(uid, session, component, label, username, password, remeber_password=None, cxname="", cxusername="", cxpassword="", cxschoolid="", address="", latitude="", longitude="", pictureid="", advance_config=None, signed_in_aid=None):
    global is_scan, program_user
    try:
        if username == "" or password == "":
            label.configure(text="用户名或密码不能为空", style="Red.TLabel")
            return
        if signed_in_aid is None:
            signed_in_aid = []
        if advance_config is None:
            advance_config = []
        if component is None:
            component = []
        is_find = 0
        for d in range(len(program_config)):
            user_config = json.loads(decrypt(program_config[d]["user_config"], decrypt(program_config[d]["password"], password_key)))
            if uid == user_config["cx_login_config"]["uid"]:
                is_find = 1
                if username != decrypt(program_config[d]["username"], username_key):
                    for j in program_config:
                        if username == decrypt(j["username"], username_key):
                            label.configure(text="当前用户名已存在，请使用其它用户名", style="Red.TLabel")
                            return
                program_config[d]["username"] = encrypt(username, username_key)
                program_config[d]["password"] = encrypt(password, password_key)
                if remeber_password is not None:
                    user_config["remeber_password"] = remeber_password
                last_login_time = user_config["last_login_time"]
                user_config["last_login_time"] = int(time.time())
                if cxname != "":
                    user_config["cx_login_config"]["cxname"] = cxname
                else:
                    cxname = user_config["cx_login_config"]["cxname"]
                if cxusername is not None:
                    user_config["cx_login_config"]["cxusername"] = cxusername
                if cxpassword is not None:
                    user_config["cx_login_config"]["cxpassword"] = cxpassword
                if cxschoolid is not None:
                    user_config["cx_login_config"]["cxschoolid"] = cxschoolid
                if address is not None:
                    user_config["cx_sign_config"]["address"] = address
                if latitude is not None:
                    user_config["cx_sign_config"]["latitude"] = latitude
                if longitude is not None:
                    user_config["cx_sign_config"]["longitude"] = longitude
                if pictureid is not None:
                    user_config["cx_sign_config"]["pictureid"] = pictureid
                if advance_config is not None:
                    user_config["advance_config"] = advance_config
                if signed_in_aid is not None:
                    user_config["signed_in_list"].append(signed_in_aid)
                if password is None:
                    password = decrypt(program_config[d]["password"], password_key)
                user_config["cx_login_config"]["cxcookies"] = json.dumps(session.cookies.get_dict())
                config = user_config
                encrypt_user_config = encrypt(json.dumps(user_config), password)
                program_config[d]["user_config"] = encrypt_user_config
                break
        if is_find == 0:
            for j in program_config:
                if username == decrypt(j["username"], username_key):
                    label.configure(text="当前用户名已存在，请使用其它用户名", style="Red.TLabel")
                    return
            last_login_time = 0
            config = {"remeber_password": remeber_password, "last_login_time": int(time.time()), "cx_login_config": {"uid": uid, "cxname": cxname, "cxusername": cxusername, "cxpassword": cxpassword, "cxschoolid": cxschoolid, "cxcookies": json.dumps(session.cookies.get_dict())}, "cx_sign_config": {"address": "", "latitude": "", "longitude": "", "pictureid": ""}, "advance_config": [], "signed_in_list": [], "course_parameters": []}
            user_data = encrypt(json.dumps(config), password)
            program_config.append({"username": encrypt(username, username_key), "password": encrypt(password, password_key), "user_config": user_data})
        with open(realpath + "\\" + program_config_file, "w") as file:
            file.write("# 学习通自动签到程序配置文件，勿删\n" + encrypt(json.dumps(program_config), "ChaoXing_xxt_sign_config"))
        if last_login_time == 0:
            last_login_time = "未知"
        else:
            last_login_time = datetime.datetime.fromtimestamp(last_login_time)
        is_scan = 4
        if os.path.isfile(realpath + "\\activeid.txt"):
            subprocess.call("DEL /F /A /Q \"" + realpath + "\\activeid.txt\"", shell=True)
        if os.path.isfile(realpath + "\\zybinformation.txt"):
            subprocess.call("DEL /F /A /Q \"" + realpath + "\\zybinformation.txt\"", shell=True)
        if os.path.isfile(realpath + "\\conf.txt"):
            subprocess.call("DEL /F /A /Q \"" + realpath + "\\conf.txt\"", shell=True)
        if os.path.isfile(realpath + "\\advance.txt"):
            subprocess.call("DEL /F /A /Q \"" + realpath + "\\advance.txt\"", shell=True)
        messagebox.showinfo("欢迎回来", "亲爱的" + str(cxname) + "同学，欢迎使用学习通自动签到程序\n您上次登录时间：" + str(last_login_time), parent=root)
        program_user = username
        main_window(session, cxname, uid, component, config)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def cx_login_check(username=None, password=None, schoolid=None, cookies=None):
    try:
        if username is not None and password is not None:
            try:
                session = requests.session()
                res = session.get("https://passport2.chaoxing.com/api/login?name={}&pwd={}&schoolid={}&verify=0".format(username, password, schoolid), headers=browser_headers, timeout=10)
                res = json.loads(res.text)
            except:
                return [False, 0]
            if res["result"]:
                return [True, res["uid"], res["realname"], session]
            else:
                return [False, 2]
        else:
            try:
                session = requests.session()
                res = session.get("https://sso.chaoxing.com/apis/login/userLogin4Uname.do", cookies=cookies, headers=browser_headers, timeout=10)
                res = json.loads(res.text)
            except:
                return [False, 0]
            if res["result"]:
                return [True, res["msg"]["puid"], res["msg"]["name"], session]
            else:
                return [False, 2]
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def encrypt(raw, key, tiv=None):
    try:
        if tiv is None:
            tiv = iv
        # 填充数据
        raw = bytes(raw, "utf-8")
        raw += (AES.block_size - len(raw) % AES.block_size) * bytes([AES.block_size - len(raw) % AES.block_size])

        # 创建AES加密器
        cipher = AES.new(bytes(key.ljust(32, "\u0000"), "utf-8")[:32], AES.MODE_CBC, bytes(tiv, "utf-8"))

        # 加密数据
        encrypted = cipher.encrypt(raw)

        # 将加密后的数据进行Base64编码
        return base64.b64encode(encrypted).decode("utf-8")
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def decrypt(encrypted, key, tiv=None):
    try:
        if tiv is None:
            tiv = iv
        try:
            # 将加密后的数据进行Base64解码
            encrypted = base64.b64decode(encrypted)

            # 创建AES解密器
            cipher = AES.new(bytes(key.ljust(32, "\u0000"), "utf-8")[:32], AES.MODE_CBC, bytes(tiv, "utf-8"))

            # 解密数据
            decrypted = cipher.decrypt(encrypted)

            # 去除填充数据，并将解密后的数据转换为字符串类型
            return decrypted[:-ord(decrypted[len(decrypted)-1:])].decode("utf-8")
        except:
            return ""
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def old_decrypt(key, text):
    aes = AES.new(add_to_16(key), AES.MODE_ECB)
    base64_decrypted = base64.decodebytes(text.encode(encoding="utf-8"))
    decrypted_text = str(aes.decrypt(base64_decrypted), encoding="utf-8")  # 执行解密密并转码返回str
    decrypted_text = base64.b64decode(decrypted_text.encode("utf-8")).decode("utf-8")
    return decrypted_text


def about_program():
    global about_window
    try:
        if check_window_close_list[0]:
            about_window = tk.Toplevel(root)
            width = 500
            height = 250
            screen_width = about_window.winfo_screenwidth()
            screen_height = about_window.winfo_screenheight()
            x = (screen_width - width) // 2
            y = (screen_height - height) // 2
            about_window.geometry("{}x{}+{}+{}".format(width, height, x, y))
            about_window.title("关于本程序")
            about_window.resizable(False, False)
            about_window.overrideredirect(True)
            with open(realpath + "\\title_ico.ico", "wb+") as temp_3:
                temp_b64 = base64.b64decode(title_icon)
                temp_3.write(temp_b64)
            about_window.iconbitmap(realpath + "\\title_ico.ico")
            check_window_close_list[0] = False
            left_image = ttk.Label(about_window)
            left_image.place(relwidth=0.5, relheight=1)
            image = Image.open(BytesIO(base64.b64decode(pic_data)))
            image_background = image.resize((250, 250))
            render = ImageTk.PhotoImage(image_background)
            image = ttk.Label(left_image, image=render)
            image.image = render
            image.pack()
            word = ttk.Label(about_window)
            word.place(relx=0.5, relwidth=0.5, relheight=1)
            word1 = ttk.Label(word, text="\n学习通自动签到程序", font=tkFont.Font(size=15, family="黑体"))
            word1.pack()
            word2 = ttk.Label(word, text="版本号：" + Version)
            word2.pack()
            word3 = ttk.Label(word, text="By：河南省WiFi攻防研究所")
            word3.pack()
            word4 = ttk.Label(word, text="Email：WIFI86@qq.com")
            word4.pack()
            word5 = ttk.Label(word, text="官方网站：https://www.waadri.top/")
            word5.pack()
            word6 = ttk.Label(word, text="官方QQ交流群：914995724")
            word6.pack()
            word7 = ttk.Label(word, text="特别鸣谢ChatGPT在开发过程中的帮助")
            word7.pack()
            word8 = ttk.Label(word, text="本软件为作者学习测试而编写")
            word8.pack()
            word9 = ttk.Label(word, text="仅供学习，严禁用于非法用途")
            word9.pack()
            determine = ttk.Button(word, text="关闭", command=lambda: close_a_window_that_opens_only_one(about_window, 0))
            determine.place(relx=0.1, rely=0.85)
            if is_download:
                update_button = ttk.Button(word, text="更新中……", state="disabled")
            else:
                update_button = ttk.Button(word, text="检查更新", command=lambda: Ready_to_update(about_window, [determine, update_button], update_button))
            update_button.place(relx=0.55, rely=0.85)
        else:
            about_window.focus_force()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def close_a_window_that_opens_only_one(window, num):
    try:
        check_window_close_list[num] = True
        window.destroy()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def show_announcement():
    try:
        url = "https://www.waadri.top/ChaoXing/api/gonggao.php"
        try:
            headers1 = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            }
            res = requests.get(url, headers=headers1)
        except:
            messagebox.showwarning("警告", "网络连接异常，系统公告加载失败，请检查您的网络连接后重试", parent=root)
            return
        gonggao = json.loads(res.text)
        messagebox.showinfo("系统公告", gonggao["data"].replace("|", "\n"), parent=root)
    except Exception as err:
        Error_handling(sys.exc_info(), err)


def overopen():
    try:
        os.startfile(sys.argv[0], "runas")
    except:
        messagebox.showwarning("警告", "程序多开失败，请手动运行程序目录下的“"+os.path.basename(sys.argv[0])+"”文件", parent=root)


def main():
    global root, mainmenu
    try:
        root = tk.Tk()
        style = ttk.Style(root)
        style.configure("Red.TLabel", foreground="red")
        style.configure("Blue.TLabel", foreground="blue")
        style.configure("Green.TLabel", foreground="green")
        with open(realpath + "\\title_ico.ico", "wb+") as ico:
            tempb64 = base64.b64decode(title_icon)
            ico.write(tempb64)
        root.geometry("1000x300+0+0")
        root.title("学习通自动签到程序 "+Version)
        root.resizable(False, False)
        root.iconbitmap(realpath + "\\title_ico.ico")
        mainmenu = Menu(root)
        menu_program = Menu(mainmenu, tearoff=False)
        mainmenu.add_cascade(label="程序", menu=menu_program)
        menu_program.add_command(label="程序多开", command=overopen)
        menu_help = Menu(mainmenu, tearoff=False)
        mainmenu.add_cascade(label="帮助", menu=menu_help)
        menu_help.add_command(label="系统公告", command=show_announcement)
        menu_help.add_command(label="河南省WiFi官方研究所官方网站", command=lambda: webbrowser.open("https://www.waadri.top/"))
        menu_help.add_command(label="学习通在线签到系统", command=lambda: webbrowser.open("https://www.waadri.top/Aut0_519n"))
        menu_help.add_command(label="添加学习通签到QQ交流群", command=lambda: webbrowser.open("https://jq.qq.com/?_wv=1027&k=Vx28KEhm"))
        menu_help.add_command(label="学习通二维码手动签到教程", command=lambda: webbrowser.open("https://api.waadri.top/ChaoXing/MSIT.php"))
        menu_help.add_command(label="关于学习通自动签到程序", command=about_program)
        root.config(menu=mainmenu)
        if os.path.isfile(realpath + "\\" + old_program_filename):
            with open(realpath + "\\" + old_program_filename) as old_file_info:
                subprocess.call("DEL /F /A /Q \"" + realpath + "\\" + old_file_info.read() + "\"", shell=True)
            subprocess.call("DEL /F /A /Q \"" + realpath + "\\" + old_program_filename + "\"", shell=True)
            create_shortcut_to_desktop()
            create_shortcut_to_startmenu()
        if os.path.isfile(realpath + "\\oldprogram"):
            with open(realpath + "\\oldprogram") as old_file_info:
                subprocess.call("DEL /F /A /Q \"" + realpath + "\\" + old_file_info.read() + "\"", shell=True)
            subprocess.call("DEL /F /A /Q \"" + realpath + "\\oldprogram\"", shell=True)
            create_shortcut_to_desktop()
            create_shortcut_to_startmenu()
        check_configuration_file(0, [])
        if realpath == winshell.desktop():
            answer = messagebox.askyesno("温馨提示", "检测到学习通自动签到程序的程序路径为桌面，由于程序在运行过程中会在程序路径下保存一些配置文件和日志，若您将程序保存在桌面可能存在误删程序配置文件的风险，这可能会导致您的签到配置丢失，因此强烈建议您将程序保存至其它非桌面路径，程序会在每次更新时自动在开始菜单和桌面上生成快捷方式，因此您不必担心找不到程序文件的问题。\n是否要忽略该提示并继续使用？", parent=root)
            if not answer:
                root.destroy()
        thread_it(Ready_to_update, root, [])
        root.mainloop()
    except Exception as err:
        Error_handling(sys.exc_info(), err)


main()
